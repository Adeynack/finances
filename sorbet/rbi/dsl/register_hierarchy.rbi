# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `RegisterHierarchy`.
# Please instead update this file by running `bin/tapioca dsl RegisterHierarchy`.

class RegisterHierarchy
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::RegisterHierarchy).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RegisterHierarchy).void)
      ).returns(::RegisterHierarchy)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RegisterHierarchy).void)
      ).returns(::RegisterHierarchy)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RegisterHierarchy).void)
      ).returns(::RegisterHierarchy)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RegisterHierarchy).void)
      ).returns(::RegisterHierarchy)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RegisterHierarchy).void)
      ).returns(::RegisterHierarchy)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::RegisterHierarchy]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::RegisterHierarchy)) }
    def fifth; end

    sig { returns(::RegisterHierarchy) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::RegisterHierarchy)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::RegisterHierarchy) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::RegisterHierarchy).void)
      ).returns(T.nilable(T::Enumerator[::RegisterHierarchy]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::RegisterHierarchy]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::RegisterHierarchy]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RegisterHierarchy).void)
      ).returns(::RegisterHierarchy)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RegisterHierarchy).void)
      ).returns(::RegisterHierarchy)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RegisterHierarchy).void)
      ).returns(::RegisterHierarchy)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::RegisterHierarchy)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::RegisterHierarchy) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::RegisterHierarchy) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::RegisterHierarchy) }
    def first!; end

    sig { returns(T.nilable(::RegisterHierarchy)) }
    def forty_two; end

    sig { returns(::RegisterHierarchy) }
    def forty_two!; end

    sig { returns(T.nilable(::RegisterHierarchy)) }
    def fourth; end

    sig { returns(::RegisterHierarchy) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::RegisterHierarchy) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::RegisterHierarchy).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RegisterHierarchy).void)
      ).returns(::RegisterHierarchy)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::RegisterHierarchy).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::RegisterHierarchy).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::RegisterHierarchy)) }
    def second; end

    sig { returns(::RegisterHierarchy) }
    def second!; end

    sig { returns(T.nilable(::RegisterHierarchy)) }
    def second_to_last; end

    sig { returns(::RegisterHierarchy) }
    def second_to_last!; end

    sig { returns(::RegisterHierarchy) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::RegisterHierarchy) }
    def take!; end

    sig { returns(T.nilable(::RegisterHierarchy)) }
    def third; end

    sig { returns(::RegisterHierarchy) }
    def third!; end

    sig { returns(T.nilable(::RegisterHierarchy)) }
    def third_to_last; end

    sig { returns(::RegisterHierarchy) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::Register)) }
    def ancestor; end

    sig { params(value: T.nilable(::Register)).void }
    def ancestor=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Register) }
    def build_ancestor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Register) }
    def build_descendant(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Register) }
    def create_ancestor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Register) }
    def create_ancestor!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Register) }
    def create_descendant(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Register) }
    def create_descendant!(*args, &blk); end

    sig { returns(T.nilable(::Register)) }
    def descendant; end

    sig { params(value: T.nilable(::Register)).void }
    def descendant=(value); end

    sig { returns(T.nilable(::Register)) }
    def reload_ancestor; end

    sig { returns(T.nilable(::Register)) }
    def reload_descendant; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def scope_if(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def scope_unless(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.untyped) }
    def ancestor_id; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def ancestor_id=(value); end

    sig { returns(T::Boolean) }
    def ancestor_id?; end

    sig { returns(T.untyped) }
    def ancestor_id_before_last_save; end

    sig { returns(T.untyped) }
    def ancestor_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def ancestor_id_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def ancestor_id_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def ancestor_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def ancestor_id_changed?; end

    sig { returns(T.untyped) }
    def ancestor_id_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def ancestor_id_previous_change; end

    sig { returns(T::Boolean) }
    def ancestor_id_previously_changed?; end

    sig { returns(T.untyped) }
    def ancestor_id_previously_was; end

    sig { returns(T.untyped) }
    def ancestor_id_was; end

    sig { void }
    def ancestor_id_will_change!; end

    sig { returns(T.untyped) }
    def descendant_id; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def descendant_id=(value); end

    sig { returns(T::Boolean) }
    def descendant_id?; end

    sig { returns(T.untyped) }
    def descendant_id_before_last_save; end

    sig { returns(T.untyped) }
    def descendant_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def descendant_id_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def descendant_id_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def descendant_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def descendant_id_changed?; end

    sig { returns(T.untyped) }
    def descendant_id_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def descendant_id_previous_change; end

    sig { returns(T::Boolean) }
    def descendant_id_previously_changed?; end

    sig { returns(T.untyped) }
    def descendant_id_previously_was; end

    sig { returns(T.untyped) }
    def descendant_id_was; end

    sig { void }
    def descendant_id_will_change!; end

    sig { returns(::Integer) }
    def generations; end

    sig { params(value: ::Integer).returns(::Integer) }
    def generations=(value); end

    sig { returns(T::Boolean) }
    def generations?; end

    sig { returns(T.nilable(::Integer)) }
    def generations_before_last_save; end

    sig { returns(T.untyped) }
    def generations_before_type_cast; end

    sig { returns(T::Boolean) }
    def generations_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def generations_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def generations_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def generations_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def generations_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def generations_previous_change; end

    sig { returns(T::Boolean) }
    def generations_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def generations_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def generations_was; end

    sig { void }
    def generations_will_change!; end

    sig { void }
    def restore_ancestor_id!; end

    sig { void }
    def restore_descendant_id!; end

    sig { void }
    def restore_generations!; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_ancestor_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_ancestor_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_descendant_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_descendant_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_generations; end

    sig { returns(T::Boolean) }
    def saved_change_to_generations?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ancestor_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_descendant_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_generations?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def scope_if(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def scope_unless(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::RegisterHierarchy } }

    sig { returns(T::Array[::RegisterHierarchy]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::RegisterHierarchy } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::RegisterHierarchy } }

    sig do
      params(
        records: T.any(::RegisterHierarchy, T::Enumerable[T.any(::RegisterHierarchy, T::Enumerable[::RegisterHierarchy])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::RegisterHierarchy, T::Enumerable[T.any(::RegisterHierarchy, T::Enumerable[::RegisterHierarchy])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::RegisterHierarchy, T::Enumerable[T.any(::RegisterHierarchy, T::Enumerable[::RegisterHierarchy])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::RegisterHierarchy, Integer, String, T::Enumerable[T.any(::RegisterHierarchy, Integer, String, T::Enumerable[::RegisterHierarchy])])
      ).returns(T::Array[::RegisterHierarchy])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::RegisterHierarchy, Integer, String, T::Enumerable[T.any(::RegisterHierarchy, Integer, String, T::Enumerable[::RegisterHierarchy])])
      ).returns(T::Array[::RegisterHierarchy])
    end
    def destroy(*records); end

    sig { returns(T::Array[::RegisterHierarchy]) }
    def load_target; end

    sig do
      params(
        records: T.any(::RegisterHierarchy, T::Enumerable[T.any(::RegisterHierarchy, T::Enumerable[::RegisterHierarchy])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::RegisterHierarchy, T::Enumerable[T.any(::RegisterHierarchy, T::Enumerable[::RegisterHierarchy])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::RegisterHierarchy, T::Enumerable[T.any(::RegisterHierarchy, T::Enumerable[::RegisterHierarchy])])
      ).returns(T::Array[::RegisterHierarchy])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::RegisterHierarchy]) }
    def target; end

    sig { returns(T::Array[::RegisterHierarchy]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::RegisterHierarchy } }

    sig { returns(T::Array[::RegisterHierarchy]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::RegisterHierarchy } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
