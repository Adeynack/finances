# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `closure_tree` gem.
# Please instead update this file by running `bin/tapioca gem closure_tree`.

class ActiveRecord::Base
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Serialization
  extend ::ClosureTree::HasClosureTree
  extend ::ClosureTree::HasClosureTreeRoot
end

# This class and mixins are an effort to reduce the namespace pollution to models that act_as_tree.
#
# source://closure_tree//lib/closure_tree.rb#3
module ClosureTree
  extend ::ActiveSupport::Autoload

  class << self
    # source://closure_tree//lib/closure_tree.rb#22
    def configuration; end

    # @yield [configuration]
    #
    # source://closure_tree//lib/closure_tree.rb#18
    def configure; end
  end
end

# source://closure_tree//lib/closure_tree/active_record_support.rb#2
module ClosureTree::ActiveRecordSupport
  # source://closure_tree//lib/closure_tree/active_record_support.rb#8
  def ensure_fixed_table_name(table_name); end

  # source://closure_tree//lib/closure_tree/active_record_support.rb#4
  def quote(field); end

  # source://closure_tree//lib/closure_tree/active_record_support.rb#16
  def remove_prefix_and_suffix(table_name); end
end

# source://closure_tree//lib/closure_tree/configuration.rb#2
class ClosureTree::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://closure_tree//lib/closure_tree/configuration.rb#5
  def initialize; end

  # Returns the value of attribute database_less.
  #
  # source://closure_tree//lib/closure_tree/configuration.rb#3
  def database_less; end

  # Sets the attribute database_less
  #
  # @param value the value to set the attribute database_less to.
  #
  # source://closure_tree//lib/closure_tree/configuration.rb#3
  def database_less=(_arg0); end
end

# source://closure_tree//lib/closure_tree/deterministic_ordering.rb#2
module ClosureTree::DeterministicOrdering
  # source://closure_tree//lib/closure_tree/deterministic_ordering.rb#3
  def order_value; end

  # source://closure_tree//lib/closure_tree/deterministic_ordering.rb#11
  def order_value=(new_order_value); end

  # source://closure_tree//lib/closure_tree/deterministic_ordering.rb#19
  def siblings_after; end

  # source://closure_tree//lib/closure_tree/deterministic_ordering.rb#15
  def siblings_before; end

  # source://closure_tree//lib/closure_tree/deterministic_ordering.rb#7
  def update_order_value(order_value); end
end

# source://closure_tree//lib/closure_tree/digraphs.rb#2
module ClosureTree::Digraphs
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ClosureTree::Digraphs::ClassMethods

  # override this method in your model class if you want a different digraph label.
  #
  # source://closure_tree//lib/closure_tree/digraphs.rb#10
  def to_digraph_label; end

  # source://closure_tree//lib/closure_tree/digraphs.rb#5
  def to_dot_digraph; end
end

# source://closure_tree//lib/closure_tree/digraphs.rb#14
module ClosureTree::Digraphs::ClassMethods
  # Renders the given scope as a DOT digraph, suitable for rendering by Graphviz
  #
  # source://closure_tree//lib/closure_tree/digraphs.rb#16
  def to_dot_digraph(tree_scope); end
end

# source://closure_tree//lib/closure_tree/finders.rb#2
module ClosureTree::Finders
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ClosureTree::Finders::ClassMethods

  # source://closure_tree//lib/closure_tree/finders.rb#36
  def find_all_by_generation(generation_level); end

  # Find a descendant node whose +ancestry_path+ will be ```self.ancestry_path + path```
  #
  # source://closure_tree//lib/closure_tree/finders.rb#6
  def find_by_path(path, attributes = T.unsafe(nil)); end

  # Find or create a descendant node whose +ancestry_path+ will be ```self.ancestry_path + path```
  #
  # source://closure_tree//lib/closure_tree/finders.rb#12
  def find_or_create_by_path(path, attributes = T.unsafe(nil)); end

  # source://closure_tree//lib/closure_tree/finders.rb#49
  def without_self(scope); end
end

# source://closure_tree//lib/closure_tree/finders.rb#53
module ClosureTree::Finders::ClassMethods
  # source://closure_tree//lib/closure_tree/finders.rb#115
  def find_all_by_generation(generation_level); end

  # Find the node whose +ancestry_path+ is +path+
  #
  # source://closure_tree//lib/closure_tree/finders.rb#136
  def find_by_path(path, attributes = T.unsafe(nil), parent_id = T.unsafe(nil)); end

  # Find or create nodes such that the +ancestry_path+ is +path+
  #
  # source://closure_tree//lib/closure_tree/finders.rb#158
  def find_or_create_by_path(path, attributes = T.unsafe(nil)); end

  # source://closure_tree//lib/closure_tree/finders.rb#72
  def leaves; end

  # source://closure_tree//lib/closure_tree/finders.rb#102
  def lowest_common_ancestor(*descendants); end

  # Returns an arbitrary node that has no parents.
  #
  # source://closure_tree//lib/closure_tree/finders.rb#68
  def root; end

  # source://closure_tree//lib/closure_tree/finders.rb#63
  def roots; end

  # source://closure_tree//lib/closure_tree/finders.rb#84
  def with_ancestor(*ancestors); end

  # source://closure_tree//lib/closure_tree/finders.rb#93
  def with_descendant(*descendants); end

  # source://closure_tree//lib/closure_tree/finders.rb#55
  def without_instance(instance); end
end

# source://closure_tree//lib/closure_tree/has_closure_tree.rb#2
module ClosureTree::HasClosureTree
  # source://closure_tree//lib/closure_tree/has_closure_tree.rb#3
  def acts_as_tree(options = T.unsafe(nil)); end

  # source://closure_tree//lib/closure_tree/has_closure_tree.rb#3
  def has_closure_tree(options = T.unsafe(nil)); end
end

# source://closure_tree//lib/closure_tree/has_closure_tree_root.rb#5
module ClosureTree::HasClosureTreeRoot
  # source://closure_tree//lib/closure_tree/has_closure_tree_root.rb#7
  def has_closure_tree_root(assoc_name, options = T.unsafe(nil)); end
end

# source://closure_tree//lib/closure_tree/hash_tree.rb#2
module ClosureTree::HashTree
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ClosureTree::HashTree::ClassMethods

  # source://closure_tree//lib/closure_tree/hash_tree.rb#5
  def hash_tree(options = T.unsafe(nil)); end
end

# source://closure_tree//lib/closure_tree/hash_tree.rb#9
module ClosureTree::HashTree::ClassMethods
  # There is no default depth limit. This might be crazy-big, depending
  # on your tree shape. Hash huge trees at your own peril!
  #
  # source://closure_tree//lib/closure_tree/hash_tree.rb#13
  def hash_tree(options = T.unsafe(nil)); end
end

# source://closure_tree//lib/closure_tree/hash_tree_support.rb#2
module ClosureTree::HashTreeSupport
  # Builds nested hash structure using the scope returned from the passed in scope
  #
  # source://closure_tree//lib/closure_tree/hash_tree_support.rb#25
  def build_hash_tree(tree_scope); end

  # source://closure_tree//lib/closure_tree/hash_tree_support.rb#3
  def default_tree_scope(scope, limit_depth = T.unsafe(nil)); end

  # source://closure_tree//lib/closure_tree/hash_tree_support.rb#19
  def hash_tree(tree_scope, limit_depth = T.unsafe(nil)); end
end

# source://closure_tree//lib/closure_tree/hierarchy_maintenance.rb#4
module ClosureTree::HierarchyMaintenance
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ClosureTree::HierarchyMaintenance::ClassMethods

  # source://closure_tree//lib/closure_tree/hierarchy_maintenance.rb#37
  def _ct_after_save; end

  # source://closure_tree//lib/closure_tree/hierarchy_maintenance.rb#55
  def _ct_before_destroy; end

  # source://closure_tree//lib/closure_tree/hierarchy_maintenance.rb#32
  def _ct_before_save; end

  # source://closure_tree//lib/closure_tree/hierarchy_maintenance.rb#14
  def _ct_skip_cycle_detection!; end

  # source://closure_tree//lib/closure_tree/hierarchy_maintenance.rb#18
  def _ct_skip_sort_order_maintenance!; end

  # source://closure_tree//lib/closure_tree/hierarchy_maintenance.rb#22
  def _ct_validate; end

  # source://closure_tree//lib/closure_tree/hierarchy_maintenance.rb#91
  def delete_hierarchy_references; end

  # source://closure_tree//lib/closure_tree/hierarchy_maintenance.rb#65
  def rebuild!(called_by_rebuild = T.unsafe(nil)); end
end

# source://closure_tree//lib/closure_tree/hierarchy_maintenance.rb#110
module ClosureTree::HierarchyMaintenance::ClassMethods
  # source://closure_tree//lib/closure_tree/hierarchy_maintenance.rb#121
  def cleanup!; end

  # Rebuilds the hierarchy table based on the parent_id column in the database.
  # Note that the hierarchy table will be truncated.
  #
  # source://closure_tree//lib/closure_tree/hierarchy_maintenance.rb#113
  def rebuild!; end
end

# source://closure_tree//lib/closure_tree/model.rb#4
module ClosureTree::Model
  extend ::ActiveSupport::Concern

  # Delegate to the Support instance on the class:
  #
  # source://closure_tree//lib/closure_tree/model.rb#49
  def _ct; end

  # source://closure_tree//lib/closure_tree/model.rb#178
  def _ct_id; end

  # source://closure_tree//lib/closure_tree/model.rb#170
  def _ct_parent_id; end

  # source://closure_tree//lib/closure_tree/model.rb#182
  def _ct_quoted_id; end

  # source://closure_tree//lib/closure_tree/model.rb#174
  def _ct_quoted_parent_id; end

  # Alias for appending to the children collection.
  # You can also add directly to the children collection, if you'd prefer.
  #
  # source://closure_tree//lib/closure_tree/model.rb#165
  def add_child(child_node); end

  # source://closure_tree//lib/closure_tree/model.rb#90
  def ancestor_ids; end

  # node's ancestors include this record
  #
  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/model.rb#144
  def ancestor_of?(node); end

  # enumerable of ancestors, immediate parent is first, root is last.
  #
  # source://closure_tree//lib/closure_tree/model.rb#86
  def ancestors; end

  # Returns an array, root first, of self_and_ancestors' values of the +to_s_column+, which defaults
  # to the +name_column+.
  # (so child.ancestry_path == +%w{grandparent parent child}+
  #
  # source://closure_tree//lib/closure_tree/model.rb#101
  def ancestry_path(to_s_column = T.unsafe(nil)); end

  # Returns true if this node has a parent, and is not a root.
  #
  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/model.rb#61
  def child?; end

  # source://closure_tree//lib/closure_tree/model.rb#105
  def child_ids; end

  # node is record's parent
  #
  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/model.rb#154
  def child_of?(node); end

  # source://closure_tree//lib/closure_tree/model.rb#79
  def depth; end

  # source://closure_tree//lib/closure_tree/model.rb#117
  def descendant_ids; end

  # node is record's ancestor
  #
  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/model.rb#149
  def descendant_of?(node); end

  # source://closure_tree//lib/closure_tree/model.rb#109
  def descendants; end

  # node and record have a same root
  #
  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/model.rb#159
  def family_of?(node); end

  # Returns true if this node has no children.
  #
  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/model.rb#66
  def leaf?; end

  # source://closure_tree//lib/closure_tree/model.rb#75
  def leaves; end

  # source://closure_tree//lib/closure_tree/model.rb#79
  def level; end

  # node's parent is this record
  #
  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/model.rb#134
  def parent_of?(node); end

  # Returns the farthest ancestor, or self if +root?+
  #
  # source://closure_tree//lib/closure_tree/model.rb#71
  def root; end

  # Returns true if this node has no parents.
  #
  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/model.rb#54
  def root?; end

  # node's root is this record
  #
  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/model.rb#139
  def root_of?(node); end

  # source://closure_tree//lib/closure_tree/model.rb#94
  def self_and_ancestors_ids; end

  # source://closure_tree//lib/closure_tree/model.rb#113
  def self_and_descendant_ids; end

  # source://closure_tree//lib/closure_tree/model.rb#121
  def self_and_siblings; end

  # source://closure_tree//lib/closure_tree/model.rb#129
  def sibling_ids; end

  # source://closure_tree//lib/closure_tree/model.rb#125
  def siblings; end
end

# source://closure_tree//lib/closure_tree/has_closure_tree_root.rb#2
class ClosureTree::MultipleRootError < ::StandardError; end

# source://closure_tree//lib/closure_tree/numeric_deterministic_ordering.rb#5
module ClosureTree::NumericDeterministicOrdering
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ClosureTree::NumericDeterministicOrdering::ClassMethods

  # source://closure_tree//lib/closure_tree/numeric_deterministic_ordering.rb#29
  def _ct_reorder_children(minimum_sort_order_value = T.unsafe(nil)); end

  # source://closure_tree//lib/closure_tree/numeric_deterministic_ordering.rb#12
  def _ct_reorder_prior_siblings_if_parent_changed; end

  # source://closure_tree//lib/closure_tree/numeric_deterministic_ordering.rb#24
  def _ct_reorder_siblings(minimum_sort_order_value = T.unsafe(nil)); end

  # source://closure_tree//lib/closure_tree/numeric_deterministic_ordering.rb#118
  def add_sibling(sibling, add_after = T.unsafe(nil)); end

  # source://closure_tree//lib/closure_tree/numeric_deterministic_ordering.rb#94
  def append_child(child_node); end

  # source://closure_tree//lib/closure_tree/numeric_deterministic_ordering.rb#110
  def append_sibling(sibling_node); end

  # source://closure_tree//lib/closure_tree/numeric_deterministic_ordering.rb#98
  def prepend_child(child_node); end

  # source://closure_tree//lib/closure_tree/numeric_deterministic_ordering.rb#114
  def prepend_sibling(sibling_node); end

  # source://closure_tree//lib/closure_tree/numeric_deterministic_ordering.rb#33
  def self_and_descendants_preordered; end
end

# source://closure_tree//lib/closure_tree/numeric_deterministic_ordering.rb#50
module ClosureTree::NumericDeterministicOrdering::ClassMethods
  # If node is nil, order the whole tree.
  #
  # source://closure_tree//lib/closure_tree/numeric_deterministic_ordering.rb#53
  def _ct_sum_order_by(node = T.unsafe(nil)); end

  # source://closure_tree//lib/closure_tree/numeric_deterministic_ordering.rb#72
  def roots_and_descendants_preordered; end
end

# source://closure_tree//lib/closure_tree/numeric_order_support.rb#2
module ClosureTree::NumericOrderSupport
  class << self
    # source://closure_tree//lib/closure_tree/numeric_order_support.rb#4
    def adapter_for_connection(connection); end
  end
end

# source://closure_tree//lib/closure_tree/numeric_order_support.rb#59
module ClosureTree::NumericOrderSupport::GenericAdapter
  # source://closure_tree//lib/closure_tree/numeric_order_support.rb#60
  def reorder_with_parent_id(parent_id, minimum_sort_order_value = T.unsafe(nil)); end
end

# source://closure_tree//lib/closure_tree/numeric_order_support.rb#15
module ClosureTree::NumericOrderSupport::MysqlAdapter
  # source://closure_tree//lib/closure_tree/numeric_order_support.rb#16
  def reorder_with_parent_id(parent_id, minimum_sort_order_value = T.unsafe(nil)); end
end

# source://closure_tree//lib/closure_tree/numeric_order_support.rb#33
module ClosureTree::NumericOrderSupport::PostgreSQLAdapter
  # source://closure_tree//lib/closure_tree/numeric_order_support.rb#34
  def reorder_with_parent_id(parent_id, minimum_sort_order_value = T.unsafe(nil)); end

  # source://closure_tree//lib/closure_tree/numeric_order_support.rb#54
  def rows_updated(result); end
end

# source://closure_tree//lib/closure_tree/has_closure_tree_root.rb#3
class ClosureTree::RootOrderingDisabledError < ::StandardError; end

# source://closure_tree//lib/closure_tree/support.rb#10
class ClosureTree::Support
  include ::ClosureTree::SupportFlags
  include ::ClosureTree::SupportAttributes
  include ::ClosureTree::ActiveRecordSupport
  include ::ClosureTree::HashTreeSupport

  # @raise [ArgumentError]
  # @return [Support] a new instance of Support
  #
  # source://closure_tree//lib/closure_tree/support.rb#19
  def initialize(model_class, options); end

  # source://closure_tree//lib/closure_tree/support.rb#82
  def belongs_to_with_optional_option(opts); end

  # source://closure_tree//lib/closure_tree/support.rb#121
  def build_ancestry_attr_path(path, attributes); end

  # source://closure_tree//lib/closure_tree/support.rb#166
  def create(model_class, attributes); end

  # source://closure_tree//lib/closure_tree/support.rb#170
  def create!(model_class, attributes); end

  # source://closure_tree//lib/closure_tree/support.rb#158
  def creator_class(model_class, sti_class); end

  # source://closure_tree//lib/closure_tree/support.rb#147
  def find_by_large_path(path, attributes = T.unsafe(nil), parent_id = T.unsafe(nil)); end

  # source://closure_tree//lib/closure_tree/support.rb#91
  def has_many_order_with_option(order_by_opt = T.unsafe(nil)); end

  # lambda-ize the order, but don't apply the default order_option
  #
  # source://closure_tree//lib/closure_tree/support.rb#87
  def has_many_order_without_option(order_by_opt); end

  # source://closure_tree//lib/closure_tree/support.rb#34
  def hierarchy_class_for_model; end

  # source://closure_tree//lib/closure_tree/support.rb#57
  def hierarchy_table_name; end

  # source://closure_tree//lib/closure_tree/support.rb#99
  def ids_from(scope); end

  # source://closure_tree//lib/closure_tree/support.rb#142
  def max_join_tables; end

  # Returns the value of attribute model_class.
  #
  # source://closure_tree//lib/closure_tree/support.rb#16
  def model_class; end

  # Returns the value of attribute options.
  #
  # source://closure_tree//lib/closure_tree/support.rb#17
  def options; end

  # source://closure_tree//lib/closure_tree/support.rb#74
  def scope_with_order(scope, additional_order_by = T.unsafe(nil)); end

  # source://closure_tree//lib/closure_tree/support.rb#133
  def scoped_attributes(scope, attributes, target_table = T.unsafe(nil)); end

  # source://closure_tree//lib/closure_tree/support.rb#103
  def where_eq(column_name, value); end

  # source://closure_tree//lib/closure_tree/support.rb#111
  def with_advisory_lock(&block); end

  # source://closure_tree//lib/closure_tree/support.rb#67
  def with_order_option(opts); end
end

# source://closure_tree//lib/closure_tree/support_attributes.rb#3
module ClosureTree::SupportAttributes
  extend ::Forwardable

  # source://closure_tree//lib/closure_tree/support_attributes.rb#7
  def advisory_lock_name; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def base_class(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def column_names(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def connection(*args, **_arg1, &block); end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#78
  def dont_order_roots; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#19
  def hierarchy_class_name; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def inheritance_column(*args, **_arg1, &block); end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#39
  def name_column; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#43
  def name_sym; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#82
  def nulls_last_order_by; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#74
  def order_by; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#86
  def order_by_order(reverse = T.unsafe(nil)); end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#92
  def order_column; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#107
  def order_column_sym; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#31
  def parent_column_name; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#35
  def parent_column_sym; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#23
  def primary_key_column; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#27
  def primary_key_type; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#58
  def quoted_hierarchy_table_name; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#62
  def quoted_id_column_name; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#70
  def quoted_name_column; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#112
  def quoted_order_column(include_table_name = T.unsafe(nil)); end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#66
  def quoted_parent_column_name; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#11
  def quoted_table_name; end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#15
  def quoted_value(value); end

  # source://closure_tree//lib/closure_tree/support_attributes.rb#103
  def require_order_column; end

  # Returns the constant name of the hierarchy_class
  #
  # @example
  #   Namespace::Model.hierarchy_class_name # => "Namespace::ModelHierarchy"
  #   Namespace::Model.short_hierarchy_class_name # => "ModelHierarchy"
  # @return [String] the constant name
  #
  # source://closure_tree//lib/closure_tree/support_attributes.rb#54
  def short_hierarchy_class_name; end

  # table_name alias keyword , like "AS". When used on table name alias, Oracle Database don't support used 'AS'
  #
  # source://closure_tree//lib/closure_tree/support_attributes.rb#119
  def t_alias_keyword; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def table_name(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def transaction(*args, **_arg1, &block); end
end

# source://closure_tree//lib/closure_tree/support_flags.rb#2
module ClosureTree::SupportFlags
  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/support_flags.rb#27
  def has_inheritance_column?(hash = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/support_flags.rb#31
  def has_name?; end

  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/support_flags.rb#10
  def include_forbidden_attributes_protection?; end

  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/support_flags.rb#19
  def order_is_numeric?; end

  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/support_flags.rb#15
  def order_option?; end

  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/support_flags.rb#23
  def subclass?; end

  # @return [Boolean]
  #
  # source://closure_tree//lib/closure_tree/support_flags.rb#4
  def use_attr_accessible?; end
end
