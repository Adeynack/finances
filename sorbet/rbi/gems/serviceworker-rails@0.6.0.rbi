# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `serviceworker-rails` gem.
# Please instead update this file by running `bin/tapioca gem serviceworker-rails`.

# source://serviceworker-rails//lib/serviceworker.rb#3
module ServiceWorker; end

# source://serviceworker-rails//lib/serviceworker/engine.rb#8
class ServiceWorker::Engine < ::Rails::Engine
  # source://serviceworker-rails//lib/serviceworker/engine.rb#27
  def app; end

  class << self
    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end

# source://serviceworker-rails//lib/serviceworker.rb#4
class ServiceWorker::Error < ::StandardError; end

# source://serviceworker-rails//lib/serviceworker/handlers/rack_handler.rb#4
module ServiceWorker::Handlers
  extend ::ServiceWorker::Handlers

  # source://serviceworker-rails//lib/serviceworker/handlers.rb#21
  def ===(other); end

  # source://serviceworker-rails//lib/serviceworker/handlers.rb#9
  def build(handler); end

  # source://serviceworker-rails//lib/serviceworker/handlers.rb#58
  def default_handler; end

  # source://serviceworker-rails//lib/serviceworker/handlers.rb#25
  def handler_for_name(name); end

  # source://serviceworker-rails//lib/serviceworker/handlers.rb#13
  def handler_for_route_match(route_match); end

  # source://serviceworker-rails//lib/serviceworker/handlers.rb#54
  def rack_handler; end

  # source://serviceworker-rails//lib/serviceworker/handlers.rb#35
  def resolve_handler(handler); end

  # @return [Boolean]
  #
  # source://serviceworker-rails//lib/serviceworker/handlers.rb#70
  def sprockets?; end

  # source://serviceworker-rails//lib/serviceworker/handlers.rb#49
  def sprockets_handler; end

  # @return [Boolean]
  #
  # source://serviceworker-rails//lib/serviceworker/handlers.rb#66
  def webpacker?; end

  # source://serviceworker-rails//lib/serviceworker/handlers.rb#44
  def webpacker_handler; end
end

# source://serviceworker-rails//lib/serviceworker/handlers/rack_handler.rb#5
class ServiceWorker::Handlers::RackHandler
  # @return [RackHandler] a new instance of RackHandler
  #
  # source://serviceworker-rails//lib/serviceworker/handlers/rack_handler.rb#6
  def initialize(root = T.unsafe(nil)); end

  # source://serviceworker-rails//lib/serviceworker/handlers/rack_handler.rb#10
  def call(env); end

  # source://serviceworker-rails//lib/serviceworker/handlers/rack_handler.rb#16
  def file_path(path_info); end

  # source://serviceworker-rails//lib/serviceworker/handlers/rack_handler.rb#20
  def file_server; end
end

# source://serviceworker-rails//lib/serviceworker/middleware.rb#6
class ServiceWorker::Middleware
  # Initialize the Rack middleware for responding to serviceworker asset
  # requests
  #
  # @param opts [#match_route] :routes matches routes on PATH_INFO
  # @param opts [Hash] :headers default headers to use for matched routes
  # @param opts [#call] :handler resolves response from matched asset name
  # @param opts [#info] :logger logs requests
  # @return [Middleware] a new instance of Middleware
  #
  # source://serviceworker-rails//lib/serviceworker/middleware.rb#20
  def initialize(app, opts = T.unsafe(nil)); end

  # source://serviceworker-rails//lib/serviceworker/middleware.rb#28
  def call(env); end

  private

  # source://serviceworker-rails//lib/serviceworker/middleware.rb#40
  def default_headers; end

  # source://serviceworker-rails//lib/serviceworker/middleware.rb#54
  def handler_for_route_match(route_match); end

  # source://serviceworker-rails//lib/serviceworker/middleware.rb#58
  def info(msg); end

  # source://serviceworker-rails//lib/serviceworker/middleware.rb#62
  def logger; end

  # source://serviceworker-rails//lib/serviceworker/middleware.rb#46
  def respond_to_match(route_match, env); end
end

# source://serviceworker-rails//lib/serviceworker/middleware.rb#8
ServiceWorker::Middleware::GET = T.let(T.unsafe(nil), String)

# source://serviceworker-rails//lib/serviceworker/middleware.rb#9
ServiceWorker::Middleware::HEAD = T.let(T.unsafe(nil), String)

# source://serviceworker-rails//lib/serviceworker/middleware.rb#7
ServiceWorker::Middleware::REQUEST_METHOD = T.let(T.unsafe(nil), String)

# source://serviceworker-rails//lib/serviceworker/rails.rb#4
module ServiceWorker::Rails; end

# source://serviceworker-rails//lib/serviceworker/rails/version.rb#5
ServiceWorker::Rails::VERSION = T.let(T.unsafe(nil), String)

# source://serviceworker-rails//lib/serviceworker/route.rb#4
class ServiceWorker::Route
  # @return [Route] a new instance of Route
  #
  # source://serviceworker-rails//lib/serviceworker/route.rb#21
  def initialize(path_pattern, asset_pattern = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute asset_pattern.
  #
  # source://serviceworker-rails//lib/serviceworker/route.rb#5
  def asset_pattern; end

  # source://serviceworker-rails//lib/serviceworker/route.rb#44
  def headers; end

  # @raise [ArgumentError]
  #
  # source://serviceworker-rails//lib/serviceworker/route.rb#36
  def match(path); end

  # Returns the value of attribute options.
  #
  # source://serviceworker-rails//lib/serviceworker/route.rb#5
  def options; end

  # Returns the value of attribute path_pattern.
  #
  # source://serviceworker-rails//lib/serviceworker/route.rb#5
  def path_pattern; end

  private

  # source://serviceworker-rails//lib/serviceworker/route.rb#50
  def resolver; end

  class << self
    # @return [Boolean]
    #
    # source://serviceworker-rails//lib/serviceworker/route.rb#17
    def sprockets?(options); end

    # @return [Boolean]
    #
    # source://serviceworker-rails//lib/serviceworker/route.rb#13
    def webpacker?(options); end
  end
end

# source://serviceworker-rails//lib/serviceworker/route.rb#54
class ServiceWorker::Route::AssetResolver
  # @return [AssetResolver] a new instance of AssetResolver
  #
  # source://serviceworker-rails//lib/serviceworker/route.rb#67
  def initialize(path_pattern, asset_pattern); end

  # Returns the value of attribute asset_pattern.
  #
  # source://serviceworker-rails//lib/serviceworker/route.rb#65
  def asset_pattern; end

  # @raise [ArgumentError]
  #
  # source://serviceworker-rails//lib/serviceworker/route.rb#72
  def call(path); end

  # Returns the value of attribute path_pattern.
  #
  # source://serviceworker-rails//lib/serviceworker/route.rb#65
  def path_pattern; end

  private

  # source://serviceworker-rails//lib/serviceworker/route.rb#86
  def compile_regexp(pattern); end

  # source://serviceworker-rails//lib/serviceworker/route.rb#90
  def compiled_source(pattern); end

  # source://serviceworker-rails//lib/serviceworker/route.rb#121
  def interpolate_captures(string, captures); end

  # source://serviceworker-rails//lib/serviceworker/route.rb#110
  def path_captures(regexp, path); end

  # source://serviceworker-rails//lib/serviceworker/route.rb#82
  def regexp; end
end

# source://serviceworker-rails//lib/serviceworker/route.rb#56
ServiceWorker::Route::AssetResolver::DEFAULT_WILDCARD_NAME = T.let(T.unsafe(nil), Symbol)

# source://serviceworker-rails//lib/serviceworker/route.rb#60
ServiceWorker::Route::AssetResolver::INTERPOLATION_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://serviceworker-rails//lib/serviceworker/route.rb#59
ServiceWorker::Route::AssetResolver::LEADING_SLASH_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://serviceworker-rails//lib/serviceworker/route.rb#58
ServiceWorker::Route::AssetResolver::NAMED_SEGMENTS_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://serviceworker-rails//lib/serviceworker/route.rb#55
ServiceWorker::Route::AssetResolver::PATH_INFO = T.let(T.unsafe(nil), String)

# source://serviceworker-rails//lib/serviceworker/route.rb#57
ServiceWorker::Route::AssetResolver::WILDCARD_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://serviceworker-rails//lib/serviceworker/route.rb#7
class ServiceWorker::Route::RouteMatch < ::Struct
  # Returns the value of attribute asset_name
  #
  # @return [Object] the current value of asset_name
  def asset_name; end

  # Sets the attribute asset_name
  #
  # @param value [Object] the value to set the attribute asset_name to.
  # @return [Object] the newly set value
  def asset_name=(_); end

  # Returns the value of attribute headers
  #
  # @return [Object] the current value of headers
  def headers; end

  # Sets the attribute headers
  #
  # @param value [Object] the value to set the attribute headers to.
  # @return [Object] the newly set value
  def headers=(_); end

  # Returns the value of attribute options
  #
  # @return [Object] the current value of options
  def options; end

  # Sets the attribute options
  #
  # @param value [Object] the value to set the attribute options to.
  # @return [Object] the newly set value
  def options=(_); end

  # Returns the value of attribute path
  #
  # @return [Object] the current value of path
  def path; end

  # Sets the attribute path
  #
  # @param value [Object] the value to set the attribute path to.
  # @return [Object] the newly set value
  def path=(_); end

  # source://serviceworker-rails//lib/serviceworker/route.rb#8
  def to_s; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://serviceworker-rails//lib/serviceworker.rb#5
class ServiceWorker::RouteError < ::ServiceWorker::Error; end

# source://serviceworker-rails//lib/serviceworker/router.rb#4
class ServiceWorker::Router
  # @return [Router] a new instance of Router
  #
  # source://serviceworker-rails//lib/serviceworker/router.rb#13
  def initialize; end

  # @return [Boolean]
  #
  # source://serviceworker-rails//lib/serviceworker/router.rb#48
  def any?; end

  # source://serviceworker-rails//lib/serviceworker/router.rb#19
  def draw(&block); end

  # source://serviceworker-rails//lib/serviceworker/router.rb#31
  def draw_default; end

  # source://serviceworker-rails//lib/serviceworker/router.rb#35
  def get(path, *args); end

  # source://serviceworker-rails//lib/serviceworker/router.rb#35
  def match(path, *args); end

  # source://serviceworker-rails//lib/serviceworker/router.rb#52
  def match_route(env); end

  # Returns the value of attribute routes.
  #
  # source://serviceworker-rails//lib/serviceworker/router.rb#11
  def routes; end

  class << self
    # source://serviceworker-rails//lib/serviceworker/router.rb#7
    def default; end
  end
end

# source://serviceworker-rails//lib/serviceworker/router.rb#5
ServiceWorker::Router::PATH_INFO = T.let(T.unsafe(nil), String)
