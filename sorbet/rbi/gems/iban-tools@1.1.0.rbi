# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `iban-tools` gem.
# Please instead update this file by running `bin/tapioca gem iban-tools`.

# vim:ts=2:sw=2:et:
#
# source://iban-tools//lib/iban-tools/conversion.rb#1
module IBANTools; end

# source://iban-tools//lib/iban-tools/conversion.rb#2
class IBANTools::Conversion
  class << self
    # source://iban-tools//lib/iban-tools/conversion.rb#40
    def checksum(country_code, bban); end

    # source://iban-tools//lib/iban-tools/conversion.rb#21
    def iban2local(country_code, bban); end

    # source://iban-tools//lib/iban-tools/conversion.rb#34
    def load_config(country_code); end

    # source://iban-tools//lib/iban-tools/conversion.rb#4
    def local2iban(country_code, data); end
  end
end

# source://iban-tools//lib/iban-tools/iban.rb#4
class IBANTools::IBAN
  # @return [IBAN] a new instance of IBAN
  #
  # source://iban-tools//lib/iban-tools/iban.rb#23
  def initialize(code); end

  # source://iban-tools//lib/iban-tools/iban.rb#63
  def bban; end

  # source://iban-tools//lib/iban-tools/iban.rb#59
  def check_digits; end

  # The code in canonical form,
  # suitable for storing in a database
  # or sending over the wire
  #
  # source://iban-tools//lib/iban-tools/iban.rb#51
  def code; end

  # source://iban-tools//lib/iban-tools/iban.rb#55
  def country_code; end

  # source://iban-tools//lib/iban-tools/iban.rb#71
  def numerify; end

  # The IBAN code in a human-readable format
  #
  # source://iban-tools//lib/iban-tools/iban.rb#91
  def prettify; end

  # source://iban-tools//lib/iban-tools/iban.rb#27
  def to_local; end

  # source://iban-tools//lib/iban-tools/iban.rb#86
  def to_s; end

  # @return [Boolean]
  #
  # source://iban-tools//lib/iban-tools/iban.rb#67
  def valid_check_digits?; end

  # source://iban-tools//lib/iban-tools/iban.rb#31
  def validation_errors(rules = T.unsafe(nil)); end

  # source://iban-tools//lib/iban-tools/iban.rb#40
  def validation_errors_against_rules(rules); end

  class << self
    # source://iban-tools//lib/iban-tools/iban.rb#10
    def canonicalize_code(code); end

    # Load and cache the default rules from rules.yml
    #
    # source://iban-tools//lib/iban-tools/iban.rb#15
    def default_rules; end

    # source://iban-tools//lib/iban-tools/iban.rb#19
    def from_local(country_code, data); end

    # @return [Boolean]
    #
    # source://iban-tools//lib/iban-tools/iban.rb#6
    def valid?(code, rules = T.unsafe(nil)); end
  end
end

# source://iban-tools//lib/iban-tools/iban_rules.rb#7
class IBANTools::IBANRules
  # @return [IBANRules] a new instance of IBANRules
  #
  # source://iban-tools//lib/iban-tools/iban_rules.rb#9
  def initialize(rules = T.unsafe(nil)); end

  # source://iban-tools//lib/iban-tools/iban_rules.rb#13
  def [](key); end

  class << self
    # source://iban-tools//lib/iban-tools/iban_rules.rb#17
    def defaults; end

    # source://iban-tools//lib/iban-tools/iban_rules.rb#21
    def load_from_string(string); end
  end
end
