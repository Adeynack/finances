# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `chusaku` gem.
# Please instead update this file by running `bin/tapioca gem chusaku`.

# Handles core functionality of annotating projects.
#
# source://chusaku//lib/chusaku/version.rb#1
module Chusaku
  class << self
    # The main method to run Chusaku. Annotate all actions in a Rails project as
    # follows:
    #
    #   # @route GET /waterlilies/:id (waterlilies)
    #   def show
    #     # ...
    #   end
    #
    # @param flags [Hash] CLI flags
    # @return [Integer] 0 on success, 1 on error
    #
    # source://chusaku//lib/chusaku.rb#18
    def call(flags = T.unsafe(nil)); end

    private

    # Adds annotations to the given file.
    #
    # @param path [String] Path to file
    # @param controller [String] Controller name
    # @param actions [Array<String>] List of valid actions for the controller
    # @return [void]
    #
    # source://chusaku//lib/chusaku.rb#44
    def annotate_file(path:, controller:, actions:); end

    # Add an annotation to the given group given by Chusaku::Parser that looks
    # like:
    #
    #   @route GET /waterlilies/:id (waterlilies)
    #
    # @param group [Hash] Parsed content given by Chusaku::Parser
    # @param route_data [Hash] Individual route data given by Chusaku::Routes
    # @return [void]
    #
    # source://chusaku//lib/chusaku.rb#107
    def annotate_group(group:, route_data:); end

    # Generate route annotation.
    #
    # @param verb [String] HTTP verb for route
    # @param path [String] Rails path for route
    # @param name [String] Name used in route helpers
    # @param defaults [Hash] Default parameters for route
    # @return [String] "@route <verb> <path> {<defaults>} (<name>)"
    #
    # source://chusaku//lib/chusaku.rb#122
    def annotate_route(verb:, path:, name:, defaults:); end

    # Returns the copy for recorded changes if `--verbose` flag is passed.
    #
    # @return [String] Copy of recorded changes
    #
    # source://chusaku//lib/chusaku.rb#206
    def changes_copy; end

    # Given a parsed group, clean out its contents.
    #
    # @param group [Hash] { type => Symbol, body => String }
    # @return [void]
    #
    # source://chusaku//lib/chusaku.rb#91
    def clean_group(group); end

    # When running the test suite, we want to make sure we're not overwriting
    # any files. `r` mode ensures that, and `w` is used for actual usage.
    #
    # @return [String] 'r' or 'w'
    #
    # source://chusaku//lib/chusaku.rb#176
    def file_mode; end

    # Extracts the new file content for the given parsed file.
    #
    # @param parsed_file [Hash] { groups => Array<Hash> }
    # @return [String] New file content
    #
    # source://chusaku//lib/chusaku.rb#152
    def new_content_for(parsed_file); end

    # Determines the copy to be used in the program output.
    #
    # @return [String] Copy to be outputted to user
    #
    # source://chusaku//lib/chusaku.rb#193
    def output_copy; end

    # Output results to user.
    #
    # @return [Integer] 0 for success, 1 for error
    #
    # source://chusaku//lib/chusaku.rb#183
    def output_results; end

    # Wraps the write operation. Needed to clearly distinguish whether it's a
    # write in the test suite or a write in actual use.
    #
    # @param path [String] File path
    # @param content [String] File content
    # @return [void]
    #
    # source://chusaku//lib/chusaku.rb#162
    def perform_write(path:, content:); end

    # Clean or annotate a group and track the group as changed if applicable.
    #
    # @param group [Hash] { type => Symbol, body => String }
    # @param type [Symbol] [:clean, :annotate]
    # @param path [String] File path
    # @param route_data [Array<Hash>] [{
    #   verb: String,
    #   path: String,
    #   name: String }]
    # @return [void]
    #
    # source://chusaku//lib/chusaku.rb#69
    def record_change(group:, type:, path:, route_data: T.unsafe(nil)); end

    # Write annotated content to a file if it differs from the original.
    #
    # @param path [String] File path to write to
    # @param parsed_file [Hash] Hash mutated by {#annotate_group}
    # @return [void]
    #
    # source://chusaku//lib/chusaku.rb#140
    def write_to_file(path:, parsed_file:); end
  end
end

# Handles parsing a file and groups its lines into categories.
#
# source://chusaku//lib/chusaku/parser.rb#3
module Chusaku::Parser
  class << self
    # Primary method to call.
    #
    # Example output:
    #
    #   {
    #     content: <Original file content>,
    #     groups: [
    #       {
    #         type: :code,
    #         body: 'class Foo\n',
    #         action: nil,
    #         line_number: 1
    #       },
    #       {
    #         type: :comment,
    #         body: '  # Bar\n  # Baz\n',
    #         action: nil,
    #         line_number: 2
    #       },
    #       {
    #         type: :action,
    #         body: '  def action_name; end\n',
    #         action: 'action_name',
    #         line_number: 4
    #       }
    #       {
    #         type: :code,
    #         body: 'end # vanilla is the best flavor\n',
    #         action: nil,
    #         line_number: 5
    #       }
    #     ]
    #   }
    #
    # @param path [String] File path to parse
    # @param actions [Array<String>] List of valid actions for this route
    # @return [Hash] { content => String, groups => Array<Hash> }
    #
    # source://chusaku//lib/chusaku/parser.rb#41
    def call(path:, actions:); end

    # Given a line and actions, returns the line's type.
    #
    # A type can be one of:
    #
    #   1. comment - A line that is entirely commented. Lines that have trailing
    #                comments do not fall under this category.
    #   2. action  - A line that contains an action definition.
    #   3. code    - Anything else.
    #
    # Returns a Hash in the form:
    #
    #   { type: :action, body: 'def foo', action: 'foo' }
    #
    # @param line [String] A line of a file
    # @param actions [Array<String>] List of valid actions for this route
    # @return [Hash] { type => Symbol, body => String, action => String }
    #
    # source://chusaku//lib/chusaku/parser.rb#81
    def parse_line(line:, actions:); end
  end
end

# Handles extracting information about the Rails project's routes.
#
# source://chusaku//lib/chusaku/routes.rb#3
class Chusaku::Routes
  class << self
    # Primary method to call.
    #
    # Example output:
    #
    #   {
    #     "users" => {
    #       "edit" => [
    #         {verb: "GET", path: "/users/:id", name: "edit_user"}
    #       ],
    #       "update" => [
    #         {verb: "PATCH", path: "/users", name: "edit_user"},
    #         {verb: "PUT", path: "/users", name: "edit_user"}
    #       ]
    #     },
    #     "empanadas" => {
    #       "create" => [
    #         {verb: "POST", path: "/empanadas", name: nil}
    #       ]
    #     }
    #   }
    #
    # @return [Hash] Routes hash
    #
    # source://chusaku//lib/chusaku/routes.rb#27
    def call; end

    private

    # Adds formatted route info for the given param combination.
    #
    # @param route [Hash] Route info
    # @param routes [Hash] Collection of all route info
    # @param controller [String] Controller key
    # @param action [String] Action key
    # @param defaults [Hash] Default parameters for route
    # @return [void]
    #
    # source://chusaku//lib/chusaku/routes.rb#56
    def add_info_for(route:, routes:, controller:, action:, defaults:); end

    # Given a routes hash, backfill entries that aren't already filled by
    # `Rails.application.routes`.
    #
    # @param routes [Hash] Routes hash generated by this class
    # @return [Hash] Backfilled routes hash
    #
    # source://chusaku//lib/chusaku/routes.rb#98
    def backfill_routes(routes); end

    # Given a route, extract the controller and action strings.
    #
    # @param route [ActionDispatch::Journey::Route] Route instance
    # @return [Array<Object>] (String, String, Hash)
    #
    # source://chusaku//lib/chusaku/routes.rb#117
    def extract_data_from(route); end

    # Formats information for a given route.
    #
    # @param route [ActionDispatch::Journey::Route] Route given by Rails
    # @param verb [String] HTTP verb
    # @param defaults [Hash] Default parameters for route
    # @return [Hash] { verb => String, path => String, name => String }
    #
    # source://chusaku//lib/chusaku/routes.rb#84
    def format(route:, verb:, defaults:); end

    # Extract the HTTP verbs for a Rails route. Required for older versions of
    # Rails that return regular expressions for a route verb which sometimes
    # contains multiple verbs.
    #
    # @param route [ActionDispatch::Journey::Route] Route given by Rails
    # @return [Array<String>] List of HTTP verbs for the given route
    #
    # source://chusaku//lib/chusaku/routes.rb#70
    def verbs_for(route); end
  end
end

# source://chusaku//lib/chusaku/version.rb#2
Chusaku::VERSION = T.let(T.unsafe(nil), String)
