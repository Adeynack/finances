# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `table_print` gem.
# Please instead update this file by running `bin/tapioca gem table_print`.

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  private

  # source://table_print//lib/table_print.rb#74
  def tp(data = T.unsafe(nil), *options); end
end

# source://table_print//lib/table_print/column.rb#1
module TablePrint; end

# source://table_print//lib/table_print/column.rb#2
class TablePrint::Column
  # @return [Column] a new instance of Column
  #
  # source://table_print//lib/table_print/column.rb#6
  def initialize(attr_hash = T.unsafe(nil)); end

  # source://table_print//lib/table_print/column.rb#32
  def add_formatter(formatter); end

  # Returns the value of attribute data.
  #
  # source://table_print//lib/table_print/column.rb#4
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://table_print//lib/table_print/column.rb#4
  def data=(_arg0); end

  # source://table_print//lib/table_print/column.rb#36
  def data_width; end

  # Returns the value of attribute default_width.
  #
  # source://table_print//lib/table_print/column.rb#4
  def default_width; end

  # Sets the attribute default_width
  #
  # @param value the value to set the attribute default_width to.
  #
  # source://table_print//lib/table_print/column.rb#4
  def default_width=(_arg0); end

  # source://table_print//lib/table_print/column.rb#28
  def display_method; end

  # source://table_print//lib/table_print/column.rb#23
  def display_method=(method); end

  # Returns the value of attribute fixed_width.
  #
  # source://table_print//lib/table_print/column.rb#4
  def fixed_width; end

  # Sets the attribute fixed_width
  #
  # @param value the value to set the attribute fixed_width to.
  #
  # source://table_print//lib/table_print/column.rb#4
  def fixed_width=(_arg0); end

  # Returns the value of attribute formatters.
  #
  # source://table_print//lib/table_print/column.rb#3
  def formatters; end

  # source://table_print//lib/table_print/column.rb#17
  def formatters=(formatter_list); end

  # Returns the value of attribute min_width.
  #
  # source://table_print//lib/table_print/column.rb#4
  def min_width; end

  # Sets the attribute min_width
  #
  # @param value the value to set the attribute min_width to.
  #
  # source://table_print//lib/table_print/column.rb#4
  def min_width=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://table_print//lib/table_print/column.rb#4
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://table_print//lib/table_print/column.rb#13
  def name=(n); end

  # Returns the value of attribute time_format.
  #
  # source://table_print//lib/table_print/column.rb#4
  def time_format; end

  # Sets the attribute time_format
  #
  # @param value the value to set the attribute time_format to.
  #
  # source://table_print//lib/table_print/column.rb#4
  def time_format=(_arg0); end

  # source://table_print//lib/table_print/column.rb#50
  def width; end

  private

  # source://table_print//lib/table_print/column.rb#58
  def max_width; end

  # source://table_print//lib/table_print/column.rb#62
  def multibyte_count; end
end

# source://table_print//lib/table_print/config.rb#2
class TablePrint::Config
  class << self
    # source://table_print//lib/table_print/config.rb#64
    def capitalize_headers; end

    # source://table_print//lib/table_print/config.rb#68
    def capitalize_headers=(caps); end

    # source://table_print//lib/table_print/config.rb#31
    def clear(klass); end

    # source://table_print//lib/table_print/config.rb#27
    def for(klass); end

    # source://table_print//lib/table_print/config.rb#80
    def io; end

    # @raise [StandardError]
    #
    # source://table_print//lib/table_print/config.rb#84
    def io=(io); end

    # source://table_print//lib/table_print/config.rb#40
    def max_width; end

    # source://table_print//lib/table_print/config.rb#44
    def max_width=(width); end

    # source://table_print//lib/table_print/config.rb#48
    def multibyte; end

    # source://table_print//lib/table_print/config.rb#52
    def multibyte=(width); end

    # source://table_print//lib/table_print/config.rb#72
    def separator; end

    # source://table_print//lib/table_print/config.rb#76
    def separator=(separator); end

    # source://table_print//lib/table_print/config.rb#19
    def set(klass, val); end

    # source://table_print//lib/table_print/config.rb#56
    def time_format; end

    # source://table_print//lib/table_print/config.rb#60
    def time_format=(format); end
  end
end

# source://table_print//lib/table_print/config.rb#7
TablePrint::Config::DEFAULT_CAPITALIZE_HEADERS = T.let(T.unsafe(nil), TrueClass)

# source://table_print//lib/table_print/config.rb#6
TablePrint::Config::DEFAULT_IO = T.let(T.unsafe(nil), IO)

# source://table_print//lib/table_print/config.rb#4
TablePrint::Config::DEFAULT_MAX_WIDTH = T.let(T.unsafe(nil), Integer)

# source://table_print//lib/table_print/config.rb#8
TablePrint::Config::DEFAULT_SEPARATOR = T.let(T.unsafe(nil), String)

# source://table_print//lib/table_print/config.rb#5
TablePrint::Config::DEFAULT_TIME_FORMAT = T.let(T.unsafe(nil), String)

# source://table_print//lib/table_print/config_resolver.rb#2
class TablePrint::ConfigResolver
  # @return [ConfigResolver] a new instance of ConfigResolver
  #
  # source://table_print//lib/table_print/config_resolver.rb#3
  def initialize(klass, default_column_names, *options); end

  # source://table_print//lib/table_print/config_resolver.rb#92
  def columns; end

  # source://table_print//lib/table_print/config_resolver.rb#44
  def get_and_remove(options_array, key); end

  # source://table_print//lib/table_print/config_resolver.rb#60
  def option_to_column(option); end

  # source://table_print//lib/table_print/config_resolver.rb#16
  def process_option_set(options); end

  # source://table_print//lib/table_print/config_resolver.rb#86
  def usable_column_names; end
end

# source://table_print//lib/table_print/fingerprinter.rb#2
class TablePrint::Fingerprinter
  # source://table_print//lib/table_print/fingerprinter.rb#54
  def create_child_group(prefix, hash, target); end

  # source://table_print//lib/table_print/fingerprinter.rb#82
  def display_method_to_nested_hash(display_method); end

  # source://table_print//lib/table_print/fingerprinter.rb#73
  def display_methods_to_nested_hash(display_methods); end

  # source://table_print//lib/table_print/fingerprinter.rb#63
  def handleable_columns(hash); end

  # source://table_print//lib/table_print/fingerprinter.rb#12
  def hash_to_rows(prefix, hash, objects); end

  # source://table_print//lib/table_print/fingerprinter.rb#3
  def lift(columns, object); end

  # source://table_print//lib/table_print/fingerprinter.rb#68
  def passable_columns(hash); end

  # source://table_print//lib/table_print/fingerprinter.rb#30
  def populate_row(prefix, hash, target); end
end

# source://table_print//lib/table_print/formatter.rb#20
class TablePrint::FixedWidthFormatter
  # @return [FixedWidthFormatter] a new instance of FixedWidthFormatter
  #
  # source://table_print//lib/table_print/formatter.rb#23
  def initialize(width); end

  # source://table_print//lib/table_print/formatter.rb#27
  def format(value); end

  # Returns the value of attribute width.
  #
  # source://table_print//lib/table_print/formatter.rb#21
  def width; end

  # Sets the attribute width
  #
  # @param value the value to set the attribute width to.
  #
  # source://table_print//lib/table_print/formatter.rb#21
  def width=(_arg0); end

  private

  # source://table_print//lib/table_print/formatter.rb#42
  def length(str); end

  # source://table_print//lib/table_print/formatter.rb#33
  def truncate(value); end
end

# source://table_print//lib/table_print/hash_extensions.rb#2
module TablePrint::HashExtensions; end

# source://table_print//lib/table_print/hash_extensions.rb#3
module TablePrint::HashExtensions::ConstructiveMerge
  # source://table_print//lib/table_print/hash_extensions.rb#4
  def constructive_merge(hash); end

  # source://table_print//lib/table_print/hash_extensions.rb#20
  def constructive_merge!(hash); end
end

# source://table_print//lib/table_print/formatter.rb#14
class TablePrint::NoNewlineFormatter
  # source://table_print//lib/table_print/formatter.rb#15
  def format(value); end
end

# source://table_print//lib/table_print/printable.rb#2
module TablePrint::Printable
  class << self
    # Sniff the data class for non-standard methods to use as a baseline for display
    #
    # source://table_print//lib/table_print/printable.rb#4
    def default_display_methods(target); end
  end
end

# source://table_print//lib/table_print.rb#12
class TablePrint::Printer
  # @return [Printer] a new instance of Printer
  #
  # source://table_print//lib/table_print.rb#19
  def initialize(data, options = T.unsafe(nil)); end

  # source://table_print//lib/table_print.rb#52
  def message; end

  # source://table_print//lib/table_print.rb#26
  def table_print; end

  private

  # source://table_print//lib/table_print.rb#65
  def columns; end

  # @return [Boolean]
  #
  # source://table_print//lib/table_print.rb#61
  def configged?; end

  class << self
    # source://table_print//lib/table_print.rb#14
    def table_print(data, options = T.unsafe(nil)); end
  end
end

# source://table_print//lib/table_print/returnable.rb#2
class TablePrint::Returnable
  # @return [Returnable] a new instance of Returnable
  #
  # source://table_print//lib/table_print/returnable.rb#3
  def initialize(string_value = T.unsafe(nil)); end

  # source://table_print//lib/table_print/returnable.rb#12
  def clear(klass); end

  # source://table_print//lib/table_print/returnable.rb#17
  def config_for(klass); end

  # source://table_print//lib/table_print/returnable.rb#25
  def inspect; end

  # source://table_print//lib/table_print/returnable.rb#7
  def set(klass, *config); end

  # source://table_print//lib/table_print/returnable.rb#21
  def to_s; end
end

# source://table_print//lib/table_print/row_group.rb#131
class TablePrint::Row
  include ::TablePrint::RowRecursion

  # @return [Row] a new instance of Row
  #
  # source://table_print//lib/table_print/row_group.rb#136
  def initialize; end

  # source://table_print//lib/table_print/row_group.rb#186
  def absorb_children(column_names, rollup); end

  # source://table_print//lib/table_print/row_group.rb#211
  def apply_formatters(column_name, value); end

  # @return [Boolean]
  #
  # source://table_print//lib/table_print/row_group.rb#229
  def can_absorb?(group); end

  # Returns the value of attribute cells.
  #
  # source://table_print//lib/table_print/row_group.rb#132
  def cells; end

  # source://table_print//lib/table_print/row_group.rb#147
  def collapse!; end

  # source://table_print//lib/table_print/row_group.rb#177
  def format; end

  # source://table_print//lib/table_print/row_group.rb#199
  def raw_column_data(column_name); end

  # source://table_print//lib/table_print/row_group.rb#205
  def raw_column_names; end

  # source://table_print//lib/table_print/row_group.rb#170
  def set_cell_values(values_hash); end

  # this is a development tool, to show the structure of the row/row_group tree
  #
  # source://table_print//lib/table_print/row_group.rb#142
  def vis(prefix = T.unsafe(nil)); end
end

# source://table_print//lib/table_print/row_group.rb#88
class TablePrint::RowGroup
  include ::TablePrint::RowRecursion

  # @return [RowGroup] a new instance of RowGroup
  #
  # source://table_print//lib/table_print/row_group.rb#91
  def initialize; end

  # source://table_print//lib/table_print/row_group.rb#111
  def collapse!; end

  # TODO: rename this to_s
  #
  # source://table_print//lib/table_print/row_group.rb#116
  def format; end

  # source://table_print//lib/table_print/row_group.rb#96
  def raw_column_data(column_name); end

  # source://table_print//lib/table_print/row_group.rb#100
  def raw_column_names; end

  # source://table_print//lib/table_print/row_group.rb#126
  def skip_first_row!; end

  # this is a development tool, to show the structure of the row/row_group tree
  #
  # source://table_print//lib/table_print/row_group.rb#106
  def vis(prefix = T.unsafe(nil)); end
end

# source://table_print//lib/table_print/row_group.rb#3
module TablePrint::RowRecursion
  # source://table_print//lib/table_print/row_group.rb#7
  def initialize; end

  # source://table_print//lib/table_print/row_group.rb#12
  def add_child(child); end

  # source://table_print//lib/table_print/row_group.rb#23
  def add_children(children); end

  # source://table_print//lib/table_print/row_group.rb#82
  def add_formatter(name, formatter); end

  # source://table_print//lib/table_print/row_group.rb#29
  def child_count; end

  # Returns the value of attribute children.
  #
  # source://table_print//lib/table_print/row_group.rb#5
  def children; end

  # Sets the attribute children
  #
  # @param value the value to set the attribute children to.
  #
  # source://table_print//lib/table_print/row_group.rb#5
  def children=(_arg0); end

  # source://table_print//lib/table_print/row_group.rb#44
  def column_count; end

  # source://table_print//lib/table_print/row_group.rb#49
  def column_for(name); end

  # source://table_print//lib/table_print/row_group.rb#38
  def columns; end

  # source://table_print//lib/table_print/row_group.rb#70
  def header; end

  # source://table_print//lib/table_print/row_group.rb#64
  def horizontal_separator; end

  # source://table_print//lib/table_print/row_group.rb#17
  def insert_children(i, children); end

  # Returns the value of attribute parent.
  #
  # source://table_print//lib/table_print/row_group.rb#4
  def parent; end

  # Sets the attribute parent
  #
  # @param value the value to set the attribute parent to.
  #
  # source://table_print//lib/table_print/row_group.rb#4
  def parent=(_arg0); end

  # source://table_print//lib/table_print/row_group.rb#33
  def set_column(column); end

  # source://table_print//lib/table_print/row_group.rb#59
  def width; end
end

# source://table_print//lib/table_print/formatter.rb#2
class TablePrint::TimeFormatter
  # @return [TimeFormatter] a new instance of TimeFormatter
  #
  # source://table_print//lib/table_print/formatter.rb#3
  def initialize(time_format = T.unsafe(nil)); end

  # source://table_print//lib/table_print/formatter.rb#8
  def format(value); end
end
