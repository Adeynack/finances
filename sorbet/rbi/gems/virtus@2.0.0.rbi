# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `virtus` gem.
# Please instead update this file by running `bin/tapioca gem virtus`.

# Builds a module for...modules
#
# @api public
# @example
#
#   module Common
#   include Virtus.module
#
#   attribute :name, String
#   attribute :age,  Integer
#   end
#
#   class User
#   include Common
#   end
#
#   class Admin
#   include Common
#   end
# @return [Module]
#
# source://virtus//lib/virtus.rb#4
module Virtus
  include ::Virtus::ClassInclusions::Methods
  include ::Virtus::InstanceMethods
  include ::Virtus::InstanceMethods::Constructor
  include ::Virtus::InstanceMethods::MassAssignment
  include ::Virtus::ClassInclusions

  mixes_in_class_methods ::Virtus::ClassMethods

  class << self
    # @api public
    #
    # source://virtus//lib/virtus.rb#109
    def coerce; end

    # @api public
    #
    # source://virtus//lib/virtus.rb#99
    def coerce=(value); end

    # @api public
    #
    # source://virtus//lib/virtus.rb#88
    def coercer(&block); end

    # @api public
    # @yield [configuration]
    #
    # source://virtus//lib/virtus.rb#123
    def config(&block); end

    # Global configuration instance
    #
    # @ return [Configuration]
    #
    # @api private
    #
    # source://virtus//lib/virtus.rb#206
    def configuration; end

    # @api private
    #
    # source://virtus//lib/virtus.rb#211
    def constantize(type); end

    # Finalize pending attributes
    #
    # @api public
    # @example
    #   class User
    #   include Virtus.model(:finalize => false)
    #
    #   attribute :address, 'Address'
    #   end
    #
    #   class Address
    #   include Virtus.model(:finalize => false)
    #
    #   attribute :user, 'User'
    #   end
    #
    #   Virtus.finalize # this will resolve constant names
    # @return [Array] array of finalized models
    #
    # source://virtus//lib/virtus.rb#249
    def finalize; end

    # @api private
    #
    # source://virtus//lib/virtus.rb#216
    def inflector; end

    # @api public
    #
    # source://virtus//lib/virtus.rb#151
    def model(options = T.unsafe(nil), &block); end

    # @api public
    #
    # source://virtus//lib/virtus.rb#177
    def module(options = T.unsafe(nil), &block); end

    # Builds a module for value object models
    #
    # @api public
    # @example
    #
    #   class GeoLocation
    #   include Virtus.value_object
    #
    #   values do
    #   attribute :lat, Float
    #   attribute :lng, Float
    #   end
    #   end
    # @return [Module]
    #
    # source://virtus//lib/virtus.rb#197
    def value_object(options = T.unsafe(nil), &block); end

    # @api private
    #
    # source://virtus//lib/virtus.rb#256
    def warn(msg); end

    private

    # @api public
    # @private
    #
    # source://virtus//lib/virtus.rb#72
    def extended(object); end

    # @api public
    # @private
    #
    # source://virtus//lib/virtus.rb#51
    def included(object); end
  end
end

# Attribute objects handle coercion and provide interface to hook into an
# attribute set instance that's included into a class or object
#
# @example
#
#   # non-strict mode
#   attr = Virtus::Attribute.build(Integer)
#   attr.coerce('1')
#   # => 1
#
#   # strict mode
#   attr = Virtus::Attribute.build(Integer, :strict => true)
#   attr.coerce('not really coercible')
#   # => Virtus::CoercionError: Failed to coerce "not really coercible" into Integer
#
# source://virtus//lib/virtus/attribute/default_value.rb#2
class Virtus::Attribute
  include ::Virtus::Equalizer::Methods
  extend ::Virtus::TypeLookup
  extend ::Virtus::Options
  extend ::DescendantsTracker

  # @api private
  # @return [Attribute] a new instance of Attribute
  #
  # source://virtus//lib/virtus/attribute.rb#85
  def initialize(type, options); end

  # Coerce the input into the expected type
  #
  # @api public
  # @example
  #
  #   attr = Virtus::Attribute.build(String)
  #   attr.coerce(:one) # => 'one'
  # @param input [Object]
  #
  # source://virtus//lib/virtus/attribute.rb#103
  def coerce(input); end

  # @api private
  #
  # source://virtus//lib/virtus/attribute.rb#51
  def coercer; end

  # Return if the attribute is coercible
  #
  # @api public
  # @example
  #
  #   attr = Virtus::Attribute.build(String, :coerce => true)
  #   attr.coercible? # => true
  #
  #   attr = Virtus::Attribute.build(String, :coerce => false)
  #   attr.coercible? # => false
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute.rb#142
  def coercible?; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute.rb#51
  def default_value; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute.rb#232
  def define_accessor_methods(attribute_set); end

  # @api private
  #
  # source://virtus//lib/virtus/attribute.rb#238
  def finalize; end

  # Return if the attribute was already finalized
  #
  # @api public
  # @example
  #
  #   attr = Virtus::Attribute.build(String, :finalize => true)
  #   attr.finalized? # => true
  #
  #   attr = Virtus::Attribute.build(String, :finalize => false)
  #   attr.finalized? # => false
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute.rb#227
  def finalized?; end

  # Return if the attribute has lazy default value evaluation
  #
  # @api public
  # @example
  #
  #   attr = Virtus::Attribute.build(String, :lazy => true)
  #   attr.lazy? # => true
  #
  #   attr = Virtus::Attribute.build(String, :lazy => false)
  #   attr.lazy? # => false
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute.rb#159
  def lazy?; end

  # Return if the attribute is in the nullify blank coercion mode
  #
  # @api public
  # @example
  #
  #   attr = Virtus::Attribute.build(String, :nullify_blank => true)
  #   attr.nullify_blank? # => true
  #
  #   attr = Virtus::Attribute.build(String, :nullify_blank => false)
  #   attr.nullify_blank? # => false
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute.rb#193
  def nullify_blank?; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute.rb#51
  def options; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute.rb#51
  def primitive; end

  # Return a new attribute with the new name
  #
  # @api public
  # @param name [Symbol]
  # @return [Attribute]
  #
  # source://virtus//lib/virtus/attribute.rb#114
  def rename(name); end

  # Return if the attribute is accepts nil values as valid coercion output
  #
  # @api public
  # @example
  #
  #   attr = Virtus::Attribute.build(String, :required => true)
  #   attr.required? # => true
  #
  #   attr = Virtus::Attribute.build(String, :required => false)
  #   attr.required? # => false
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute.rb#210
  def required?; end

  # Return if the attribute is in the strict coercion mode
  #
  # @api public
  # @example
  #
  #   attr = Virtus::Attribute.build(String, :strict => true)
  #   attr.strict? # => true
  #
  #   attr = Virtus::Attribute.build(String, :strict => false)
  #   attr.strict? # => false
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute.rb#176
  def strict?; end

  # Return type of this attribute
  #
  # @api public
  # @return [Axiom::Types::Type]
  #
  # source://virtus//lib/virtus/attribute.rb#48
  def type; end

  # Return if the given value was coerced
  #
  # @api public
  # @param value [Object]
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute.rb#125
  def value_coerced?(value); end

  class << self
    # source://virtus//lib/virtus/support/options.rb#63
    def accessor(value = T.unsafe(nil)); end

    # Builds an attribute instance
    #
    # @api public
    # @param type [Class, Array, Hash, String, Symbol] this can be an explicit class or an object from which virtus can infer
    #   the type
    # @param options [#to_hash] optional extra options hash
    # @return [Attribute]
    #
    # source://virtus//lib/virtus/attribute.rb#65
    def build(type, options = T.unsafe(nil)); end

    # @api private
    #
    # source://virtus//lib/virtus/attribute.rb#70
    def build_coercer(type, options = T.unsafe(nil)); end

    # @api private
    #
    # source://virtus//lib/virtus/attribute.rb#75
    def build_type(definition); end

    # @api public
    # @deprecated
    # @see Virtus.coerce
    #
    # source://virtus//lib/virtus/attribute.rb#36
    def coerce(value = T.unsafe(nil)); end

    # source://virtus//lib/virtus/support/options.rb#63
    def default(value = T.unsafe(nil)); end

    # source://virtus//lib/virtus/support/options.rb#63
    def finalize(value = T.unsafe(nil)); end

    # source://virtus//lib/virtus/support/options.rb#63
    def lazy(value = T.unsafe(nil)); end

    # @api private
    #
    # source://virtus//lib/virtus/attribute.rb#80
    def merge_options!(*_arg0); end

    # source://virtus//lib/virtus/support/options.rb#63
    def nullify_blank(value = T.unsafe(nil)); end

    # source://virtus//lib/virtus/support/options.rb#63
    def primitive(value = T.unsafe(nil)); end

    # source://virtus//lib/virtus/support/options.rb#63
    def required(value = T.unsafe(nil)); end

    # source://virtus//lib/virtus/support/options.rb#63
    def strict(value = T.unsafe(nil)); end
  end
end

# Accessor extension provides methods to read and write attributes
#
# @example
#
#   attribute = Virtus::Attribute.build(String, :name => :email)
#   model     = Class.new { attr_reader :email }
#   object    = model.new
#
#   attribute.set(object, 'jane@doe.com')
#   attribute.get(object) # => 'jane@doe.com'
#
# source://virtus//lib/virtus/attribute/accessor.rb#15
module Virtus::Attribute::Accessor
  # Return if attribute value is defined
  #
  # @api public
  # @param instance [Object]
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute/accessor.rb#44
  def defined?(instance); end

  # Return value of the attribute
  #
  # @api public
  # @param instance [Object]
  # @return [Object]
  #
  # source://virtus//lib/virtus/attribute/accessor.rb#55
  def get(instance); end

  # Return instance_variable_name used by this accessor
  #
  # @api private
  #
  # source://virtus//lib/virtus/attribute/accessor.rb#27
  def instance_variable_name; end

  # Return name of this accessor attribute
  #
  # @api public
  # @return [Symbol]
  #
  # source://virtus//lib/virtus/attribute/accessor.rb#22
  def name; end

  # Returns a Boolean indicating whether the reader method is public
  #
  # @api private
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute/accessor.rb#87
  def public_reader?; end

  # Returns a Boolean indicating whether the writer method is public
  #
  # @api private
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute/accessor.rb#96
  def public_writer?; end

  # Set value of the attribute
  #
  # @api public
  # @param instance [Object]
  # @param value [Object]
  # @return [Object] value that was set
  #
  # source://virtus//lib/virtus/attribute/accessor.rb#67
  def set(instance, value); end

  # Set default value
  #
  # @api public
  # @param instance [Object]
  # @return [Object] value that was set
  #
  # source://virtus//lib/virtus/attribute/accessor.rb#78
  def set_default_value(instance); end

  class << self
    # @api private
    # @private
    #
    # source://virtus//lib/virtus/attribute/accessor.rb#30
    def extended(descendant); end
  end
end

# Boolean attribute allows true or false values to be set
# Additionally it adds boolean reader method, like "admin?"
#
# @example
#   class Post
#   include Virtus
#
#   attribute :published, Boolean
#   end
#
#   post = Post.new(:published => false)
#   post.published?  # => false
#
# source://virtus//lib/virtus/attribute/boolean.rb#17
class Virtus::Attribute::Boolean < ::Virtus::Attribute
  # Creates an attribute reader method as a query
  #
  # @api private
  # @param mod [Module]
  # @return [undefined]
  #
  # source://virtus//lib/virtus/attribute/boolean.rb#48
  def define_accessor_methods(attribute_set); end

  # Returns if the given value is either true or false
  #
  # @api public
  # @example
  #   boolean = Virtus::Attribute::Boolean.new(:bool)
  #   boolean.value_coerced?(true)    # => true
  #   boolean.value_coerced?(false)   # => true
  #   boolean.value_coerced?(1)       # => false
  #   boolean.value_coerced?('true')  # => false
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute/boolean.rb#37
  def value_coerced?(value); end

  class << self
    # @api private
    #
    # source://virtus//lib/virtus/attribute/boolean.rb#21
    def build_type(*_arg0); end
  end
end

# Builder is used to set up an attribute instance based on input type and options
#
# @private
#
# source://virtus//lib/virtus/attribute/builder.rb#80
class Virtus::Attribute::Builder
  # @api private
  # @return [Builder] a new instance of Builder
  #
  # source://virtus//lib/virtus/attribute/builder.rb#113
  def initialize(type_definition, options); end

  # Returns the value of attribute attribute.
  #
  # source://virtus//lib/virtus/attribute/builder.rb#81
  def attribute; end

  # Returns the value of attribute klass.
  #
  # source://virtus//lib/virtus/attribute/builder.rb#81
  def klass; end

  # Returns the value of attribute options.
  #
  # source://virtus//lib/virtus/attribute/builder.rb#81
  def options; end

  # Returns the value of attribute type.
  #
  # source://virtus//lib/virtus/attribute/builder.rb#81
  def type; end

  # Returns the value of attribute type_definition.
  #
  # source://virtus//lib/virtus/attribute/builder.rb#81
  def type_definition; end

  private

  # @api private
  #
  # source://virtus//lib/virtus/attribute/builder.rb#167
  def determine_coercer; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/builder.rb#172
  def determine_visibility; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/builder.rb#154
  def initialize_attribute; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/builder.rb#127
  def initialize_class; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/builder.rb#149
  def initialize_coercer; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/builder.rb#144
  def initialize_default_value; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/builder.rb#137
  def initialize_options(options); end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/builder.rb#132
  def initialize_type; end

  class << self
    # @api private
    #
    # source://virtus//lib/virtus/attribute/builder.rb#84
    def call(type, options = T.unsafe(nil)); end

    # @api private
    #
    # source://virtus//lib/virtus/attribute/builder.rb#95
    def determine_type(klass, default = T.unsafe(nil)); end
  end
end

# Coercer accessor wrapper
#
# @api private
#
# source://virtus//lib/virtus/attribute/coercer.rb#7
class Virtus::Attribute::Coercer < ::Virtus::Coercer
  # Initialize a new coercer object
  #
  # @api private
  # @param coercers [Object] accessor
  # @param coercion [Symbol] method
  # @return [undefined]
  #
  # source://virtus//lib/virtus/attribute/coercer.rb#20
  def initialize(type, coercers); end

  # Coerce given value
  #
  # @api private
  # @return [Object]
  #
  # source://virtus//lib/virtus/attribute/coercer.rb#31
  def call(value); end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/coercer.rb#10
  def coercers; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/coercer.rb#10
  def method; end

  # @api public
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute/coercer.rb#38
  def success?(primitive, value); end
end

# Attribute extension providing coercion when setting an attribute value
#
# source://virtus//lib/virtus/attribute/coercible.rb#6
module Virtus::Attribute::Coercible
  # Coerce value before setting
  #
  # @api public
  # @see Accessor#set
  #
  # source://virtus//lib/virtus/attribute/coercible.rb#13
  def set(instance, value); end
end

# Collection attribute handles enumerable-like types
#
# Handles coercing members to the designated member type.
#
# source://virtus//lib/virtus/attribute/collection.rb#8
class Virtus::Attribute::Collection < ::Virtus::Attribute
  # @api public
  #
  # source://virtus//lib/virtus/attribute/collection.rb#73
  def coerce(value); end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/collection.rb#89
  def finalize; end

  # @api private
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute/collection.rb#96
  def finalized?; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/collection.rb#12
  def member_type; end

  # @api public
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute/collection.rb#84
  def value_coerced?(value); end

  class << self
    # @api private
    #
    # source://virtus//lib/virtus/attribute/collection.rb#63
    def build_type(definition); end

    # @api private
    #
    # source://virtus//lib/virtus/attribute/collection.rb#68
    def merge_options!(type, options); end
  end
end

# FIXME: temporary hack, remove when Axiom::Type works with EV as member_type
#
# source://virtus//lib/virtus/attribute/collection.rb#15
class Virtus::Attribute::Collection::Type < ::Struct
  # source://virtus//lib/virtus/attribute/collection.rb#57
  def coercion_method; end

  # Returns the value of attribute member_type
  #
  # @return [Object] the current value of member_type
  def member_type; end

  # Sets the attribute member_type
  #
  # @param value [Object] the value to set the attribute member_type to.
  # @return [Object] the newly set value
  def member_type=(_); end

  # Returns the value of attribute primitive
  #
  # @return [Object] the current value of primitive
  def primitive; end

  # Sets the attribute primitive
  #
  # @param value [Object] the value to set the attribute primitive to.
  # @return [Object] the newly set value
  def primitive=(_); end

  class << self
    def [](*_arg0); end

    # @return [Boolean]
    #
    # source://virtus//lib/virtus/attribute/collection.rb#36
    def axiom_type?(type); end

    # source://virtus//lib/virtus/attribute/collection.rb#16
    def infer(type, primitive); end

    # source://virtus//lib/virtus/attribute/collection.rb#40
    def infer_member_type(type); end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end

    # @return [Boolean]
    #
    # source://virtus//lib/virtus/attribute/collection.rb#32
    def pending?(primitive); end
  end
end

# Class representing the default value option
#
# @api private
#
# source://virtus//lib/virtus/attribute/default_value.rb#7
class Virtus::Attribute::DefaultValue
  include ::Virtus::Equalizer::Methods
  extend ::DescendantsTracker

  # Initializes an default value instance
  #
  # @api private
  # @param value [Object]
  # @return [undefined]
  #
  # source://virtus//lib/virtus/attribute/default_value.rb#36
  def initialize(value); end

  # Evaluates the value
  #
  # @api private
  # @return [Object] evaluated value
  #
  # source://virtus//lib/virtus/attribute/default_value.rb#45
  def call(*_arg0); end

  # Returns the value instance
  #
  # @api private
  # @return [Object]
  #
  # source://virtus//lib/virtus/attribute/default_value.rb#27
  def value; end

  class << self
    # Builds a default value instance
    #
    # @api private
    # @return [Virtus::Attribute::DefaultValue]
    #
    # source://virtus//lib/virtus/attribute/default_value.rb#17
    def build(*args); end
  end
end

# Represents default value evaluated via a callable object
#
# @api private
#
# source://virtus//lib/virtus/attribute/default_value/from_callable.rb#8
class Virtus::Attribute::DefaultValue::FromCallable < ::Virtus::Attribute::DefaultValue
  # Evaluates the value via value#call
  #
  # @api private
  # @param args [Object]
  # @return [Object] evaluated value
  #
  # source://virtus//lib/virtus/attribute/default_value/from_callable.rb#28
  def call(*args); end

  class << self
    # Return if the class can handle the value
    #
    # @api private
    # @param value [Object]
    # @return [Boolean]
    #
    # source://virtus//lib/virtus/attribute/default_value/from_callable.rb#17
    def handle?(value); end
  end
end

# Represents default value evaluated via a clonable object
#
# @api private
#
# source://virtus//lib/virtus/attribute/default_value/from_clonable.rb#8
class Virtus::Attribute::DefaultValue::FromClonable < ::Virtus::Attribute::DefaultValue
  # Evaluates the value via value#clone
  #
  # @api private
  # @return [Object] evaluated value
  #
  # source://virtus//lib/virtus/attribute/default_value/from_clonable.rb#28
  def call(*_arg0); end

  class << self
    # Return if the class can handle the value
    #
    # @api private
    # @param value [Object]
    # @return [Boolean]
    #
    # source://virtus//lib/virtus/attribute/default_value/from_clonable.rb#19
    def handle?(value); end
  end
end

# @api private
#
# source://virtus//lib/virtus/attribute/default_value/from_clonable.rb#9
Virtus::Attribute::DefaultValue::FromClonable::SINGLETON_CLASSES = T.let(T.unsafe(nil), Array)

# Represents default value evaluated via a symbol
#
# @api private
#
# source://virtus//lib/virtus/attribute/default_value/from_symbol.rb#8
class Virtus::Attribute::DefaultValue::FromSymbol < ::Virtus::Attribute::DefaultValue
  # Evaluates the value via instance#public_send(value)
  #
  # Symbol value is returned if the instance doesn't respond to value
  #
  # @api private
  # @return [Object] evaluated value
  #
  # source://virtus//lib/virtus/attribute/default_value/from_symbol.rb#28
  def call(instance, _); end

  class << self
    # Return if the class can handle the value
    #
    # @api private
    # @param value [Object]
    # @return [Boolean]
    #
    # source://virtus//lib/virtus/attribute/default_value/from_symbol.rb#17
    def handle?(value); end
  end
end

# EmbeddedValue handles virtus-like objects, OpenStruct and Struct
#
# source://virtus//lib/virtus/attribute/embedded_value.rb#6
class Virtus::Attribute::EmbeddedValue < ::Virtus::Attribute
  class << self
    # @api private
    #
    # source://virtus//lib/virtus/attribute/embedded_value.rb#54
    def build_coercer(type, _options); end

    # @api private
    #
    # source://virtus//lib/virtus/attribute/embedded_value.rb#49
    def build_type(definition); end

    # @api private
    # @return [Boolean]
    #
    # source://virtus//lib/virtus/attribute/embedded_value.rb#44
    def handles?(klass); end
  end
end

# Builds OpenStruct-like instance with attributes passed to the constructor
# as a hash
#
# @private
#
# source://virtus//lib/virtus/attribute/embedded_value.rb#30
class Virtus::Attribute::EmbeddedValue::FromOpenStruct < ::Virtus::Coercer
  # @api public
  #
  # source://virtus//lib/virtus/attribute/embedded_value.rb#33
  def call(input); end
end

# Builds Struct-like instance with attributes passed to the constructor as
# a list of args rather than a hash
#
# @private
#
# source://virtus//lib/virtus/attribute/embedded_value.rb#13
class Virtus::Attribute::EmbeddedValue::FromStruct < ::Virtus::Coercer
  # @api public
  #
  # source://virtus//lib/virtus/attribute/embedded_value.rb#16
  def call(input); end
end

# source://virtus//lib/virtus/attribute/embedded_value.rb#7
Virtus::Attribute::EmbeddedValue::TYPES = T.let(T.unsafe(nil), Array)

# Handles attributes with Hash type
#
# source://virtus//lib/virtus/attribute/hash.rb#6
class Virtus::Attribute::Hash < ::Virtus::Attribute
  # Coerce members
  #
  # @api public
  # @see [Attribute#coerce]
  #
  # source://virtus//lib/virtus/attribute/hash.rb#104
  def coerce(*_arg0); end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/hash.rb#115
  def finalize; end

  # @api private
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute/hash.rb#123
  def finalized?; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/hash.rb#11
  def key_type; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/hash.rb#11
  def value_type; end

  class << self
    # @api private
    #
    # source://virtus//lib/virtus/attribute/hash.rb#89
    def build_type(definition); end

    # @api private
    #
    # source://virtus//lib/virtus/attribute/hash.rb#94
    def merge_options!(type, options); end
  end
end

# FIXME: remove this once axiom-types supports it
#
# @private
#
# source://virtus//lib/virtus/attribute/hash.rb#16
class Virtus::Attribute::Hash::Type < ::Struct
  # @api private
  #
  # source://virtus//lib/virtus/attribute/hash.rb#78
  def coercion_method; end

  # Returns the value of attribute key_type
  #
  # @return [Object] the current value of key_type
  def key_type; end

  # Sets the attribute key_type
  #
  # @param value [Object] the value to set the attribute key_type to.
  # @return [Object] the newly set value
  def key_type=(_); end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/hash.rb#83
  def primitive; end

  # Returns the value of attribute value_type
  #
  # @return [Object] the current value of value_type
  def value_type; end

  # Sets the attribute value_type
  #
  # @param value [Object] the value to set the attribute value_type to.
  # @return [Object] the newly set value
  def value_type=(_); end

  class << self
    def [](*_arg0); end

    # @api private
    # @return [Boolean]
    #
    # source://virtus//lib/virtus/attribute/hash.rb#35
    def axiom_type?(type); end

    # @api private
    #
    # source://virtus//lib/virtus/attribute/hash.rb#40
    def determine_type(type); end

    # source://virtus//lib/virtus/attribute/hash.rb#17
    def infer(type); end

    # @api private
    #
    # source://virtus//lib/virtus/attribute/hash.rb#51
    def infer_key_and_value_types(type); end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end

    # @api private
    # @return [Boolean]
    #
    # source://virtus//lib/virtus/attribute/hash.rb#30
    def pending?(primitive); end
  end
end

# source://virtus//lib/virtus/attribute/lazy_default.rb#4
module Virtus::Attribute::LazyDefault
  # @api public
  #
  # source://virtus//lib/virtus/attribute/lazy_default.rb#7
  def get(instance); end
end

# Attribute extension which nullifies blank attributes when coercion failed
#
# source://virtus//lib/virtus/attribute/nullify_blank.rb#6
module Virtus::Attribute::NullifyBlank
  # @api public
  # @see [Attribute#coerce]
  #
  # source://virtus//lib/virtus/attribute/nullify_blank.rb#11
  def coerce(input); end
end

# Attribute extension which raises CoercionError when coercion failed
#
# source://virtus//lib/virtus/attribute/strict.rb#6
module Virtus::Attribute::Strict
  # @api public
  # @see [Attribute#coerce]
  #
  # source://virtus//lib/virtus/attribute/strict.rb#13
  def coerce(*_arg0); end
end

# A set of Attribute objects
#
# source://virtus//lib/virtus/attribute_set.rb#4
class Virtus::AttributeSet < ::Module
  include ::Enumerable

  # Initialize an AttributeSet
  #
  # @api private
  # @param parent [AttributeSet]
  # @param attributes [Array]
  # @return [undefined]
  #
  # source://virtus//lib/virtus/attribute_set.rb#23
  def initialize(parent = T.unsafe(nil), attributes = T.unsafe(nil)); end

  # Adds an attribute to the set
  #
  # @api public
  # @example
  #   attribute_set << attribute
  # @param attribute [Attribute]
  # @return [self]
  #
  # source://virtus//lib/virtus/attribute_set.rb#75
  def <<(attribute); end

  # Get an attribute by name
  #
  # @api public
  # @example
  #   attribute_set[:name]  # => Attribute object
  # @param name [Symbol]
  # @return [Attribute]
  #
  # source://virtus//lib/virtus/attribute_set.rb#91
  def [](name); end

  # Set an attribute by name
  #
  # @api public
  # @example
  #   attribute_set[:name] = attribute
  # @param name [Symbol]
  # @param attribute [Attribute]
  # @return [Attribute]
  #
  # source://virtus//lib/virtus/attribute_set.rb#106
  def []=(name, attribute); end

  # Coerce attributes received to a hash
  #
  # @api private
  # @return [Hash]
  #
  # source://virtus//lib/virtus/attribute_set.rb#195
  def coerce(attributes); end

  # Defines an attribute reader method
  #
  # @api private
  # @param attribute [Attribute]
  # @param method_name [Symbol]
  # @param visibility [Symbol]
  # @return [undefined]
  #
  # source://virtus//lib/virtus/attribute_set.rb#131
  def define_reader_method(attribute, method_name, visibility); end

  # Defines an attribute writer method
  #
  # @api private
  # @param attribute [Attribute]
  # @param method_name [Symbol]
  # @param visibility [Symbol]
  # @return [undefined]
  #
  # source://virtus//lib/virtus/attribute_set.rb#145
  def define_writer_method(attribute, method_name, visibility); end

  # Iterate over each attribute in the set
  #
  # @api public
  # @example
  #   attribute_set = AttributeSet.new(attributes, parent)
  #   attribute_set.each { |attribute| ... }
  # @return [self]
  # @yield [attribute]
  # @yieldparam attribute [Attribute] each attribute in the set
  #
  # source://virtus//lib/virtus/attribute_set.rb#44
  def each; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute_set.rb#202
  def finalize; end

  # Get values of all attributes defined for this class, ignoring privacy
  #
  # @api private
  # @return [Hash]
  #
  # source://virtus//lib/virtus/attribute_set.rb#155
  def get(object); end

  # Adds the attributes to the set
  #
  # @api public
  # @example
  #   attribute_set.merge(attributes)
  # @param attributes [Array<Attribute>]
  # @return [self]
  #
  # source://virtus//lib/virtus/attribute_set.rb#60
  def merge(attributes); end

  # Reset the index when the parent is updated
  #
  # @api private
  # @return [self]
  #
  # source://virtus//lib/virtus/attribute_set.rb#116
  def reset; end

  # Mass-assign attribute values
  #
  # @api private
  # @return [Hash]
  # @see Virtus::InstanceMethods#attributes=
  #
  # source://virtus//lib/virtus/attribute_set.rb#169
  def set(object, attributes); end

  # Set default attributes
  #
  # @api private
  # @return [self]
  #
  # source://virtus//lib/virtus/attribute_set.rb#183
  def set_defaults(object, filter = T.unsafe(nil)); end

  private

  # Merge the attributes into the index
  #
  # @api private
  # @param attributes [Array<Attribute>]
  # @return [undefined]
  #
  # source://virtus//lib/virtus/attribute_set.rb#222
  def merge_attributes(attributes); end

  # @api private
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute_set.rb#211
  def skip_default?(object, attribute); end

  # Update the symbol and string indexes with the attribute
  #
  # @api private
  # @param name [Symbol]
  # @param attribute [Attribute]
  # @return [undefined]
  #
  # source://virtus//lib/virtus/attribute_set.rb#235
  def update_index(name, attribute); end

  class << self
    # @api private
    #
    # source://virtus//lib/virtus/attribute_set.rb#8
    def create(descendant); end
  end
end

# Class to build a Virtus module with it's own config
#
# This allows for individual Virtus modules to be included in
# classes and not impacted by the global Virtus config,
# which is implemented using Virtus::config.
#
# @private
#
# source://virtus//lib/virtus/builder.rb#10
class Virtus::Builder
  # Initializes a new Builder
  #
  # @api private
  # @param config [Configuration]
  # @param mod [Module]
  # @return [undefined]
  #
  # source://virtus//lib/virtus/builder.rb#44
  def initialize(conf, mod = T.unsafe(nil)); end

  # Return config
  #
  # @api private
  # @return [config]
  #
  # source://virtus//lib/virtus/builder.rb#24
  def config; end

  # @api private
  #
  # source://virtus//lib/virtus/builder.rb#51
  def extensions; end

  # Return module
  #
  # @api private
  # @return [Module]
  #
  # source://virtus//lib/virtus/builder.rb#17
  def mod; end

  # @api private
  #
  # source://virtus//lib/virtus/builder.rb#56
  def options; end

  private

  # @api private
  #
  # source://virtus//lib/virtus/builder.rb#79
  def add_extended_hook; end

  # Adds the .included hook to the anonymous module which then defines the
  # .attribute method to override the default.
  #
  # @api private
  # @return [Module]
  #
  # source://virtus//lib/virtus/builder.rb#68
  def add_included_hook; end

  # @api private
  # @yield [HookContext.new(self, config)]
  #
  # source://virtus//lib/virtus/builder.rb#89
  def with_hook_context; end

  class << self
    # @api private
    #
    # source://virtus//lib/virtus/builder.rb#27
    def call(options, &block); end

    # @api private
    #
    # source://virtus//lib/virtus/builder.rb#32
    def pending; end
  end
end

# Context used for building "included" and "extended" hooks
#
# @private
#
# source://virtus//lib/virtus/builder/hook_context.rb#7
class Virtus::Builder::HookContext
  # @api private
  # @return [HookContext] a new instance of HookContext
  #
  # source://virtus//lib/virtus/builder/hook_context.rb#11
  def initialize(builder, config); end

  # Returns the value of attribute attribute_method.
  #
  # source://virtus//lib/virtus/builder/hook_context.rb#8
  def attribute_method; end

  # Returns the value of attribute builder.
  #
  # source://virtus//lib/virtus/builder/hook_context.rb#8
  def builder; end

  # Returns the value of attribute config.
  #
  # source://virtus//lib/virtus/builder/hook_context.rb#8
  def config; end

  # @api private
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/builder/hook_context.rb#25
  def constructor?; end

  # @api private
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/builder/hook_context.rb#35
  def finalize?; end

  # @api private
  #
  # source://virtus//lib/virtus/builder/hook_context.rb#40
  def initialize_attribute_method; end

  # @api private
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/builder/hook_context.rb#30
  def mass_assignment?; end

  # @api private
  #
  # source://virtus//lib/virtus/builder/hook_context.rb#17
  def modules; end
end

# Class-level extensions
#
# source://virtus//lib/virtus/class_inclusions.rb#4
module Virtus::ClassInclusions
  include ::Virtus::ClassInclusions::Methods
  include ::Virtus::InstanceMethods
  include ::Virtus::InstanceMethods::Constructor
  include ::Virtus::InstanceMethods::MassAssignment

  mixes_in_class_methods ::Virtus::ClassMethods

  class << self
    private

    # Extends a descendant with class and instance methods
    #
    # @api private
    # @param descendant [Class]
    # @return [undefined]
    #
    # source://virtus//lib/virtus/class_inclusions.rb#13
    def included(descendant); end
  end
end

# source://virtus//lib/virtus/class_inclusions.rb#23
module Virtus::ClassInclusions::Methods
  # Return a list of allowed writer method names
  #
  # @api private
  # @return [Set]
  #
  # source://virtus//lib/virtus/class_inclusions.rb#30
  def allowed_writer_methods; end

  private

  # Return class' attribute set
  #
  # @api private
  # @return [Virtus::AttributeSet]
  #
  # source://virtus//lib/virtus/class_inclusions.rb#41
  def attribute_set; end
end

# Class methods that are added when you include Virtus
#
# source://virtus//lib/virtus/class_methods.rb#4
module Virtus::ClassMethods
  include ::Virtus::Extensions::Methods
  include ::Virtus::ConstMissingExtensions

  # Returns all the attributes defined on a Class
  #
  # @api public
  # @example
  #   class User
  #   include Virtus
  #
  #   attribute :name, String
  #   attribute :age,  Integer
  #   end
  #
  #   User.attribute_set  # =>
  #
  #   TODO: implement inspect so the output is not cluttered - solnic
  # @return [AttributeSet]
  #
  # source://virtus//lib/virtus/class_methods.rb#38
  def attribute_set; end

  # @api public
  # @deprecated
  # @see Virtus::ClassMethods.attribute_set
  #
  # source://virtus//lib/virtus/class_methods.rb#47
  def attributes; end

  private

  # The list of allowed public methods
  #
  # @api private
  # @return [Array<String>]
  #
  # source://virtus//lib/virtus/class_methods.rb#78
  def allowed_methods; end

  # @api private
  #
  # source://virtus//lib/virtus/class_methods.rb#83
  def assert_valid_name(name); end

  # Setup descendants' own Attribute-accessor-method-hosting modules
  #
  # Descendants inherit Attribute accessor methods via Ruby's inheritance
  # mechanism: Attribute accessor methods are defined in a module included
  # in a superclass. Attributes defined on descendants add methods to the
  # descendant's Attributes accessor module, leaving the superclass's method
  # table unaffected.
  #
  # @api private
  # @param descendant [Class]
  # @return [undefined]
  #
  # source://virtus//lib/virtus/class_methods.rb#67
  def inherited(descendant); end

  class << self
    private

    # Hook called when module is extended
    #
    # @api private
    # @param descendant [Class]
    # @return [undefined]
    #
    # source://virtus//lib/virtus/class_methods.rb#15
    def extended(descendant); end
  end
end

# Abstract coercer class
#
# source://virtus//lib/virtus/coercer.rb#5
class Virtus::Coercer
  include ::Virtus::Equalizer::Methods

  # @api private
  # @return [Coercer] a new instance of Coercer
  #
  # source://virtus//lib/virtus/coercer.rb#12
  def initialize(type); end

  # Coerce input value into expected primitive type
  #
  # @api public
  # @param input [Object]
  # @return [Object] coerced input
  #
  # source://virtus//lib/virtus/coercer.rb#24
  def call(input); end

  # @api private
  #
  # source://virtus//lib/virtus/coercer.rb#9
  def primitive; end

  # Return if the input value was successfuly coerced
  #
  # @api public
  # @param input [Object]
  # @return [Object] coerced input
  #
  # source://virtus//lib/virtus/coercer.rb#35
  def success?(primitive, input); end

  # @api private
  #
  # source://virtus//lib/virtus/coercer.rb#9
  def type; end
end

# @api public
#
# source://virtus//lib/virtus.rb#13
class Virtus::CoercionError < ::StandardError
  # @api public
  # @return [CoercionError] a new instance of CoercionError
  #
  # source://virtus//lib/virtus.rb#16
  def initialize(output, attribute); end

  # @api public
  #
  # source://virtus//lib/virtus.rb#14
  def attribute; end

  # @api public
  #
  # source://virtus//lib/virtus.rb#29
  def attribute_name; end

  # @api public
  # @return [Boolean]
  #
  # source://virtus//lib/virtus.rb#33
  def attribute_name?; end

  # @api public
  #
  # source://virtus//lib/virtus.rb#21
  def build_message; end

  # @api public
  #
  # source://virtus//lib/virtus.rb#14
  def output; end

  # @api public
  #
  # source://virtus//lib/virtus.rb#37
  def target_type; end
end

# A Configuration instance
#
# source://virtus//lib/virtus/configuration.rb#4
class Virtus::Configuration
  # Initialized a configuration instance
  #
  # @api private
  # @return [undefined]
  # @yield [_self]
  # @yieldparam _self [Virtus::Configuration] the object that the method was called on
  #
  # source://virtus//lib/virtus/configuration.rb#32
  def initialize(options = T.unsafe(nil)); end

  # Access the coerce setting for this instance
  #
  # source://virtus//lib/virtus/configuration.rb#10
  def coerce; end

  # Access the coerce setting for this instance
  #
  # source://virtus//lib/virtus/configuration.rb#10
  def coerce=(_arg0); end

  # Access the coercer for this instance and optional configure a
  # new coercer with the passed block
  #
  # @api private
  # @example
  #   configuration.coercer do |config|
  #   config.string.boolean_map = { true => '1', false => '0' }
  #   end
  # @return [Coercer]
  #
  # source://virtus//lib/virtus/configuration.rb#56
  def coercer(&block); end

  # Access the constructor setting for this instance
  #
  # source://virtus//lib/virtus/configuration.rb#22
  def constructor; end

  # Access the constructor setting for this instance
  #
  # source://virtus//lib/virtus/configuration.rb#22
  def constructor=(_arg0); end

  # Access the finalize setting for this instance
  #
  # source://virtus//lib/virtus/configuration.rb#7
  def finalize; end

  # Access the finalize setting for this instance
  #
  # source://virtus//lib/virtus/configuration.rb#7
  def finalize=(_arg0); end

  # Access the mass-assignment setting for this instance
  #
  # source://virtus//lib/virtus/configuration.rb#25
  def mass_assignment; end

  # Access the mass-assignment setting for this instance
  #
  # source://virtus//lib/virtus/configuration.rb#25
  def mass_assignment=(_arg0); end

  # Access the nullify_blank setting for this instance
  #
  # source://virtus//lib/virtus/configuration.rb#16
  def nullify_blank; end

  # Access the nullify_blank setting for this instance
  #
  # source://virtus//lib/virtus/configuration.rb#16
  def nullify_blank=(_arg0); end

  # Access the required setting for this instance
  #
  # source://virtus//lib/virtus/configuration.rb#19
  def required; end

  # Access the required setting for this instance
  #
  # source://virtus//lib/virtus/configuration.rb#19
  def required=(_arg0); end

  # Access the strict setting for this instance
  #
  # source://virtus//lib/virtus/configuration.rb#13
  def strict; end

  # Access the strict setting for this instance
  #
  # source://virtus//lib/virtus/configuration.rb#13
  def strict=(_arg0); end

  # @api private
  #
  # source://virtus//lib/virtus/configuration.rb#62
  def to_h; end
end

# source://virtus//lib/virtus/const_missing_extensions.rb#2
module Virtus::ConstMissingExtensions
  # Hooks into const missing process to determine types of attributes
  #
  # @api private
  # @param name [String]
  # @return [Class]
  #
  # source://virtus//lib/virtus/const_missing_extensions.rb#11
  def const_missing(name); end
end

# @api public
#
# source://virtus//lib/virtus.rb#8
Virtus::EXTRA_CONST_ARGS = T.let(T.unsafe(nil), Array)

# Define equality, equivalence and inspection methods
#
# source://virtus//lib/virtus/support/equalizer.rb#4
class Virtus::Equalizer < ::Module
  # Initialize an Equalizer with the given keys
  #
  # Will use the keys with which it is initialized to define #cmp?,
  # #hash, and #inspect
  #
  # @api private
  # @param name [String]
  # @param keys [Array<Symbol>]
  # @return [undefined]
  #
  # source://virtus//lib/virtus/support/equalizer.rb#18
  def initialize(name, keys = T.unsafe(nil)); end

  # Append a key and compile the equality methods
  #
  # @api private
  # @return [Equalizer] self
  #
  # source://virtus//lib/virtus/support/equalizer.rb#30
  def <<(key); end

  private

  # Define an #cmp? method based on the instance's values identified by #keys
  #
  # @api private
  # @return [undefined]
  #
  # source://virtus//lib/virtus/support/equalizer.rb#53
  def define_cmp_method; end

  # Define a #hash method based on the instance's values identified by #keys
  #
  # @api private
  # @return [undefined]
  #
  # source://virtus//lib/virtus/support/equalizer.rb#65
  def define_hash_method; end

  # Define an inspect method that reports the values of the instance's keys
  #
  # @api private
  # @return [undefined]
  #
  # source://virtus//lib/virtus/support/equalizer.rb#77
  def define_inspect_method; end

  # Define the equalizer methods based on #keys
  #
  # @api private
  # @return [undefined]
  #
  # source://virtus//lib/virtus/support/equalizer.rb#42
  def define_methods; end

  # Include the #eql? and #== methods
  #
  # @api private
  # @return [undefined]
  #
  # source://virtus//lib/virtus/support/equalizer.rb#89
  def include_comparison_methods; end
end

# The comparison methods
#
# source://virtus//lib/virtus/support/equalizer.rb#94
module Virtus::Equalizer::Methods
  # Compare the object with other object for equivalency
  #
  # @api public
  # @example
  #   object == other  # => true or false
  # @param other [Object] the other object to compare with
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/support/equalizer.rb#122
  def ==(other); end

  # Compare the object with other object for equality
  #
  # @api public
  # @example
  #   object.eql?(other)  # => true or false
  # @param other [Object] the other object to compare with
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/support/equalizer.rb#107
  def eql?(other); end
end

# Extensions common for both classes and instances
#
# source://virtus//lib/virtus/extensions.rb#4
module Virtus::Extensions
  class << self
    private

    # A hook called when an object is extended with Virtus
    #
    # @api private
    # @param object [Object]
    # @return [undefined]
    #
    # source://virtus//lib/virtus/extensions.rb#16
    def extended(object); end
  end
end

# source://virtus//lib/virtus/extensions.rb#6
Virtus::Extensions::INVALID_WRITER_METHODS = T.let(T.unsafe(nil), Set)

# source://virtus//lib/virtus/extensions.rb#26
module Virtus::Extensions::Methods
  # The list of writer methods that can be mass-assigned to in #attributes=
  #
  # @api private
  # @return [Set]
  #
  # source://virtus//lib/virtus/extensions.rb#82
  def allowed_writer_methods; end

  # Defines an attribute on an object's class or instance
  #
  # @api public
  # @example
  #   class Book
  #   include Virtus.model
  #
  #   attribute :title,        String
  #   attribute :author,       String
  #   attribute :published_at, DateTime
  #   attribute :page_count,   Integer
  #   attribute :index                   # defaults to Object
  #   end
  # @param name [Symbol] the name of an attribute
  # @param type [Class, Array, Hash, Axiom::Types::Type, String, Symbol] the type class of an attribute
  # @param options [#to_hash] the extra options hash
  # @return [self]
  # @see Attribute.build
  #
  # source://virtus//lib/virtus/extensions.rb#62
  def attribute(name, type = T.unsafe(nil), options = T.unsafe(nil)); end

  # @api public
  # @see Virtus.default_value
  #
  # source://virtus//lib/virtus/extensions.rb#71
  def values(&block); end

  private

  # Return an attribute set for that instance
  #
  # @api private
  # @return [AttributeSet]
  #
  # source://virtus//lib/virtus/extensions.rb#98
  def attribute_set; end

  class << self
    private

    # @api private
    # @private
    #
    # source://virtus//lib/virtus/extensions.rb#29
    def extended(descendant); end
  end
end

# source://virtus//lib/virtus/extensions.rb#7
Virtus::Extensions::RESERVED_NAMES = T.let(T.unsafe(nil), Set)

# source://virtus//lib/virtus/extensions.rb#5
Virtus::Extensions::WRITER_METHOD_REGEXP = T.let(T.unsafe(nil), Regexp)

# Instance methods that are added when you include Virtus
#
# source://virtus//lib/virtus/instance_methods.rb#4
module Virtus::InstanceMethods
  # Returns a value of the attribute with the given name
  #
  # @api public
  # @example
  #   class User
  #   include Virtus
  #
  #   attribute :name, String
  #   end
  #
  #   user = User.new(:name => 'John')
  #   user[:name]  # => "John"
  # @param name [Symbol] a name of an attribute
  # @return [Object] a value of an attribute
  #
  # source://virtus//lib/virtus/instance_methods.rb#95
  def [](name); end

  # Sets a value of the attribute with the given name
  #
  # @api public
  # @example
  #   class User
  #   include Virtus
  #
  #   attribute :name, String
  #   end
  #
  #   user = User.new
  #   user[:name] = "John"  # => "John"
  #   user.name             # => "John"
  # @param name [Symbol] a name of an attribute
  # @param value [Object] a value to be set
  # @return [Object] the value set on an object
  #
  # source://virtus//lib/virtus/instance_methods.rb#122
  def []=(name, value); end

  # Freeze object
  #
  # @api public
  # @api public
  # @example
  #
  #   class User
  #   include Virtus
  #
  #   attribute :name, String
  #   attribute :age,  Integer
  #   end
  #
  #   user = User.new(:name => 'John', :age => 28)
  #   user.frozen? # => false
  #   user.freeze
  #   user.frozen? # => true
  # @return [self]
  #
  # source://virtus//lib/virtus/instance_methods.rb#147
  def freeze; end

  # Reset an attribute to its default
  #
  # @api public
  # @api public
  # @example
  #
  #   class User
  #   include Virtus
  #
  #   attribute :age,  Integer, default: 21
  #   end
  #
  #   user = User.new(:name => 'John', :age => 28)
  #   user.age = 30
  #   user.age # => 30
  #   user.reset_attribute(:age)
  #   user.age # => 21
  # @return [self]
  #
  # source://virtus//lib/virtus/instance_methods.rb#173
  def reset_attribute(attribute_name); end

  # Set default attributes
  #
  # @api private
  # @return [self]
  #
  # source://virtus//lib/virtus/instance_methods.rb#184
  def set_default_attributes; end

  # Set default attributes even lazy ones
  #
  # @api public
  # @return [self]
  #
  # source://virtus//lib/virtus/instance_methods.rb#194
  def set_default_attributes!; end

  private

  # The list of allowed public methods
  #
  # @api private
  # @return [Array<String>]
  #
  # source://virtus//lib/virtus/instance_methods.rb#206
  def allowed_methods; end

  # @api private
  #
  # source://virtus//lib/virtus/instance_methods.rb#211
  def assert_valid_name(name); end
end

# source://virtus//lib/virtus/instance_methods.rb#6
module Virtus::InstanceMethods::Constructor
  # Set attributes during initialization of an object
  #
  # @api private
  # @param attributes [#to_hash] the attributes hash to be set
  # @return [undefined]
  #
  # source://virtus//lib/virtus/instance_methods.rb#16
  def initialize(attributes = T.unsafe(nil)); end
end

# Constructor
#
# source://virtus//lib/virtus/instance_methods.rb#23
module Virtus::InstanceMethods::MassAssignment
  # Returns a hash of all publicly accessible attributes
  #
  # @api public
  # @example
  #   class User
  #   include Virtus
  #
  #   attribute :name, String
  #   attribute :age,  Integer
  #   end
  #
  #   user = User.new(:name => 'John', :age => 28)
  #   user.attributes  # => { :name => 'John', :age => 28 }
  # @return [Hash]
  #
  # source://virtus//lib/virtus/instance_methods.rb#41
  def attributes; end

  # Mass-assign attribute values
  #
  # Keys in the +attributes+ param can be symbols or strings.
  # All referenced Attribute writer methods *will* be called.
  # Non-attribute setter methods on the receiver *will* be called.
  #
  # @api public
  # @example
  #   class User
  #   include Virtus
  #
  #   attribute :name, String
  #   attribute :age,  Integer
  #   end
  #
  #   user = User.new
  #   user.attributes = { :name => 'John', 'age' => 28 }
  # @param attributes [#to_hash] a hash of attribute names and values to set on the receiver
  # @return [Hash]
  #
  # source://virtus//lib/virtus/instance_methods.rb#70
  def attributes=(attributes); end

  # Returns a hash of all publicly accessible attributes
  #
  # @api public
  # @example
  #   class User
  #   include Virtus
  #
  #   attribute :name, String
  #   attribute :age,  Integer
  #   end
  #
  #   user = User.new(:name => 'John', :age => 28)
  #   user.attributes  # => { :name => 'John', :age => 28 }
  # @return [Hash]
  #
  # source://virtus//lib/virtus/instance_methods.rb#41
  def to_h; end

  # Returns a hash of all publicly accessible attributes
  #
  # @api public
  # @example
  #   class User
  #   include Virtus
  #
  #   attribute :name, String
  #   attribute :age,  Integer
  #   end
  #
  #   user = User.new(:name => 'John', :age => 28)
  #   user.attributes  # => { :name => 'John', :age => 28 }
  # @return [Hash]
  #
  # source://virtus//lib/virtus/instance_methods.rb#41
  def to_hash; end
end

# source://virtus//lib/virtus/model.rb#3
module Virtus::Model
  include ::Virtus::ClassInclusions::Methods
  include ::Virtus::InstanceMethods
  include ::Virtus::InstanceMethods::Constructor
  include ::Virtus::InstanceMethods::MassAssignment
  include ::Virtus::ClassInclusions

  mixes_in_class_methods ::Virtus::ClassMethods

  class << self
    # @api private
    # @private
    #
    # source://virtus//lib/virtus/model.rb#12
    def extended(descendant); end

    # @api private
    # @private
    #
    # source://virtus//lib/virtus/model.rb#6
    def included(descendant); end
  end
end

# Core
#
# source://virtus//lib/virtus/model.rb#38
module Virtus::Model::Constructor
  include ::Virtus::InstanceMethods::Constructor

  class << self
    private

    # @api private
    # @private
    #
    # source://virtus//lib/virtus/model.rb#41
    def included(descendant); end
  end
end

# source://virtus//lib/virtus/model.rb#17
module Virtus::Model::Core
  include ::Virtus::ClassInclusions::Methods
  include ::Virtus::InstanceMethods

  mixes_in_class_methods ::Virtus::ClassMethods

  class << self
    private

    # @api private
    # @private
    #
    # source://virtus//lib/virtus/model.rb#29
    def extended(descendant); end

    # @api private
    # @private
    #
    # source://virtus//lib/virtus/model.rb#20
    def included(descendant); end
  end
end

# Constructor
#
# source://virtus//lib/virtus/model.rb#49
module Virtus::Model::MassAssignment
  include ::Virtus::InstanceMethods::MassAssignment

  class << self
    private

    # @api private
    # @private
    #
    # source://virtus//lib/virtus/model.rb#59
    def extended(descendant); end

    # @api private
    # @private
    #
    # source://virtus//lib/virtus/model.rb#52
    def included(descendant); end
  end
end

# @private
#
# source://virtus//lib/virtus/builder.rb#96
class Virtus::ModelBuilder < ::Virtus::Builder; end

# @private
#
# source://virtus//lib/virtus/builder.rb#100
class Virtus::ModuleBuilder < ::Virtus::Builder
  private

  # @api private
  #
  # source://virtus//lib/virtus/builder.rb#105
  def add_included_hook; end
end

# Virtus module that can define attributes for later inclusion
#
# @private
#
# source://virtus//lib/virtus/module_extensions.rb#6
module Virtus::ModuleExtensions
  include ::Virtus::ConstMissingExtensions

  # Define an attribute in the module
  #
  # @api private
  # @return [self]
  # @see Virtus::Extensions#attribute
  #
  # source://virtus//lib/virtus/module_extensions.rb#30
  def attribute(name, type = T.unsafe(nil), options = T.unsafe(nil)); end

  private

  # Define attributes on a class or instance
  #
  # @api private
  # @param object [Object, Class]
  # @return [undefined]
  #
  # source://virtus//lib/virtus/module_extensions.rb#81
  def define_attributes(object); end

  # Extend an object with Virtus methods and define attributes
  #
  # @api private
  # @param object [Object]
  # @return [undefined]
  #
  # source://virtus//lib/virtus/module_extensions.rb#44
  def extended(object); end

  # Extend a class with Virtus methods and define attributes
  #
  # @api private
  # @param object [Object]
  # @return [undefined]
  #
  # source://virtus//lib/virtus/module_extensions.rb#58
  def included(object); end

  class << self
    # @api private
    # @private
    #
    # source://virtus//lib/virtus/module_extensions.rb#10
    def extended(mod); end

    # @api private
    #
    # source://virtus//lib/virtus/module_extensions.rb#16
    def setup(mod, inclusions = T.unsafe(nil), attribute_definitions = T.unsafe(nil)); end
  end
end

# A module that adds class and instance level options
#
# source://virtus//lib/virtus/support/options.rb#4
module Virtus::Options
  # Defines which options are valid for a given attribute class
  #
  # @api public
  # @example
  #   class MyAttribute < Virtus::Attribute
  #   accept_options :foo, :bar
  #   end
  # @return [self]
  #
  # source://virtus//lib/virtus/support/options.rb#47
  def accept_options(*new_options); end

  # Returns an array of valid options
  #
  # @api public
  # @example
  #   Virtus::Attribute::String.accepted_options
  #   # => [:primitive, :accessor, :reader, :writer]
  # @return [Array] the array of valid option names
  #
  # source://virtus//lib/virtus/support/options.rb#33
  def accepted_options; end

  # Returns default options hash for a given attribute class
  #
  # @api public
  # @example
  #   Virtus::Attribute::String.options
  #   # => {:primitive => String}
  # @return [Hash] a hash of default option values
  #
  # source://virtus//lib/virtus/support/options.rb#16
  def options; end

  protected

  # Adds new options that an attribute class can accept
  #
  # @api private
  # @param new_options [#to_ary] new options to be added
  # @return [self]
  #
  # source://virtus//lib/virtus/support/options.rb#93
  def add_accepted_options(new_options); end

  # Adds a reader/writer method for the give option name
  #
  # @api private
  # @return [undefined]
  #
  # source://virtus//lib/virtus/support/options.rb#61
  def define_option_method(option); end

  # Sets default options
  #
  # @api private
  # @param new_options [#each] options to be set
  # @return [self]
  #
  # source://virtus//lib/virtus/support/options.rb#80
  def set_options(new_options); end

  private

  # Adds descendant to descendants array and inherits default options
  #
  # @api private
  # @param descendant [Class]
  # @return [undefined]
  #
  # source://virtus//lib/virtus/support/options.rb#107
  def inherited(descendant); end
end

# Attribute placeholder used when type constant is passed as a string or symbol
#
# @private
#
# source://virtus//lib/virtus/attribute/builder.rb#6
class Virtus::PendingAttribute
  # @api private
  # @return [PendingAttribute] a new instance of PendingAttribute
  #
  # source://virtus//lib/virtus/attribute/builder.rb#10
  def initialize(type, options); end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/builder.rb#26
  def determine_type; end

  # @api private
  #
  # source://virtus//lib/virtus/attribute/builder.rb#16
  def finalize; end

  # @api private
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute/builder.rb#21
  def finalized?; end

  # Returns the value of attribute name.
  #
  # source://virtus//lib/virtus/attribute/builder.rb#7
  def name; end

  # Returns the value of attribute options.
  #
  # source://virtus//lib/virtus/attribute/builder.rb#7
  def options; end

  # Returns the value of attribute type.
  #
  # source://virtus//lib/virtus/attribute/builder.rb#7
  def type; end
end

# Extracts the actual type primitive from input type
#
# @private
#
# source://virtus//lib/virtus/attribute/builder.rb#39
class Virtus::TypeDefinition
  # @api private
  # @return [TypeDefinition] a new instance of TypeDefinition
  #
  # source://virtus//lib/virtus/attribute/builder.rb#43
  def initialize(type); end

  # @api private
  # @return [Boolean]
  #
  # source://virtus//lib/virtus/attribute/builder.rb#49
  def pending?; end

  # Returns the value of attribute primitive.
  #
  # source://virtus//lib/virtus/attribute/builder.rb#40
  def primitive; end

  # Returns the value of attribute type.
  #
  # source://virtus//lib/virtus/attribute/builder.rb#40
  def type; end

  private

  # @api private
  #
  # source://virtus//lib/virtus/attribute/builder.rb#56
  def initialize_primitive; end
end

# A module that adds type lookup to a class
#
# source://virtus//lib/virtus/support/type_lookup.rb#4
module Virtus::TypeLookup
  # Returns a descendant based on a name or class
  #
  # @api public
  # @example
  #   MyClass.determine_type('String')  # => MyClass::String
  # @param class_or_name [Class, #to_s] name of a class or a class itself
  # @return [Class] a descendant
  # @return [nil] nil if the type cannot be determined by the class_or_name
  #
  # source://virtus//lib/virtus/support/type_lookup.rb#34
  def determine_type(class_or_name); end

  # Return the default primitive supported
  #
  # @api private
  # @raise [NotImplementedError]
  # @return [Class]
  #
  # source://virtus//lib/virtus/support/type_lookup.rb#43
  def primitive; end

  private

  # @api private
  #
  # source://virtus//lib/virtus/support/type_lookup.rb#50
  def determine_type_and_cache(class_or_name); end

  # Return the class given a descendant
  #
  # @api private
  # @param descendant [Class]
  # @return [Class]
  #
  # source://virtus//lib/virtus/support/type_lookup.rb#68
  def determine_type_from_descendant(descendant); end

  # Return the class given a primitive
  #
  # @api private
  # @param primitive [Class]
  # @return [Class]
  # @return [nil] nil if the type cannot be determined by the primitive
  #
  # source://virtus//lib/virtus/support/type_lookup.rb#82
  def determine_type_from_primitive(primitive); end

  # Return the class given a string
  #
  # @api private
  # @param string [String]
  # @return [Class]
  # @return [nil] nil if the type cannot be determined by the string
  #
  # source://virtus//lib/virtus/support/type_lookup.rb#102
  def determine_type_from_string(string); end

  class << self
    # Set cache ivar on the model
    #
    # @api private
    # @param model [Class]
    # @return [undefined]
    #
    # source://virtus//lib/virtus/support/type_lookup.rb#15
    def extended(model); end
  end
end

# source://virtus//lib/virtus/support/type_lookup.rb#6
Virtus::TypeLookup::TYPE_FORMAT = T.let(T.unsafe(nil), Regexp)

# @api public
#
# source://virtus//lib/virtus.rb#11
Virtus::Undefined = T.let(T.unsafe(nil), Object)

# Include this Module for Value Object semantics
#
# The idea is that instances should be immutable and compared based on state
#   (rather than identity, as is typically the case)
#
# @example
#   class GeoLocation
#   include Virtus::ValueObject
#   attribute :latitude,  Float
#   attribute :longitude, Float
#   end
#
#   location = GeoLocation.new(:latitude => 10, :longitude => 100)
#   same_location = GeoLocation.new(:latitude => 10, :longitude => 100)
#   location == same_location       #=> true
#   hash = { location => :foo }
#   hash[same_location]             #=> :foo
#
# source://virtus//lib/virtus/value_object.rb#20
module Virtus::ValueObject
  include ::Virtus::ClassInclusions::Methods
  include ::Virtus::InstanceMethods
  include ::Virtus::InstanceMethods::Constructor
  include ::Virtus::InstanceMethods::MassAssignment
  include ::Virtus::ClassInclusions
  include ::Virtus
  include ::Virtus::ValueObject::InstanceMethods

  mixes_in_class_methods ::Virtus::ClassMethods
  mixes_in_class_methods ::Virtus::ValueObject::ClassMethods
  mixes_in_class_methods ::Virtus::ValueObject::AllowedWriterMethods

  class << self
    private

    # Callback to configure including Class as a Value Object
    #
    # Including Class will include Virtus and have additional
    #   value object semantics defined in this module
    #
    # TODO: stacking modules is getting painful
    #   time for Facets' module_inheritance, ActiveSupport::Concern or the like
    #
    # @api private
    # @return [Undefined]
    #
    # source://virtus//lib/virtus/value_object.rb#33
    def included(base); end
  end
end

# source://virtus//lib/virtus/value_object.rb#83
module Virtus::ValueObject::AllowedWriterMethods
  # The list of writer methods that can be mass-assigned to in #attributes=
  #
  # @api private
  # @return [Set]
  #
  # source://virtus//lib/virtus/value_object.rb#89
  def allowed_writer_methods; end
end

# source://virtus//lib/virtus/value_object.rb#99
module Virtus::ValueObject::ClassMethods
  # Define an attribute on the receiver
  #
  # The Attribute will have private writer methods (eg., immutable instances)
  #   and be used in equality/equivalence comparisons
  #
  # @api public
  # @example
  #   class GeoLocation
  #   include Virtus::ValueObject
  #
  #   attribute :latitude,  Float
  #   attribute :longitude, Float
  #   end
  # @return [self]
  # @see Virtus::ClassMethods.attribute
  #
  # source://virtus//lib/virtus/value_object.rb#119
  def attribute(name, type, options = T.unsafe(nil)); end

  # Define and include a module that provides Value Object semantics
  #
  # Included module will have #inspect, #eql?, #== and #hash
  # methods whose definition is based on the _keys_ argument
  #
  # @api public
  # @example
  #   virtus_class.equalizer
  # @return [Equalizer] An Equalizer module which defines #inspect, #eql?, #== and #hash
  #   for instances of this class
  #
  # source://virtus//lib/virtus/value_object.rb#137
  def equalizer; end
end

# source://virtus//lib/virtus/value_object.rb#47
module Virtus::ValueObject::InstanceMethods
  # ValueObjects are immutable and can't be cloned
  #
  # They always represent the same value
  #
  # @api public
  # @example
  #
  #   value_object.clone === value_object # => true
  # @return [self]
  #
  # source://virtus//lib/virtus/value_object.rb#60
  def clone; end

  # ValueObjects are immutable and can't be cloned
  #
  # They always represent the same value
  #
  # @api public
  # @example
  #   value_object.clone === value_object # => true
  # @return [self]
  #
  # source://virtus//lib/virtus/value_object.rb#60
  def dup; end

  # Create a new ValueObject by combining the passed attribute hash with
  # the instances attributes.
  #
  # @api public
  # @example
  #
  #   number = PhoneNumber.new(kind: "mobile", number: "123-456-78-90")
  #   number.with(number: "987-654-32-10")
  #   # => #<PhoneNumber kind="mobile" number="987-654-32-10">
  # @return [Object]
  #
  # source://virtus//lib/virtus/value_object.rb#77
  def with(attribute_updates); end
end

# @private
#
# source://virtus//lib/virtus/builder.rb#119
class Virtus::ValueObjectBuilder < ::Virtus::Builder
  # @api private
  #
  # source://virtus//lib/virtus/builder.rb#122
  def extensions; end

  # @api private
  #
  # source://virtus//lib/virtus/builder.rb#127
  def options; end
end
