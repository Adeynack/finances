# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sidekiq-scheduler` gem.
# Please instead update this file by running `bin/tapioca gem sidekiq-scheduler`.

module Sidekiq
  extend ::SidekiqScheduler::Schedule
end

# source://sidekiq-scheduler//lib/sidekiq/scheduler.rb#3
Sidekiq::Scheduler = SidekiqScheduler::Scheduler

# source://sidekiq-scheduler//lib/sidekiq-scheduler/utils.rb#3
module SidekiqScheduler; end

# source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#2
class SidekiqScheduler::Config
  # We have to set the default as nil because the scheduler could be instantiated without
  # passing the sidekiq config, and in those scenarios we don't want to fail
  #
  # @return [Config] a new instance of Config
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#5
  def initialize(sidekiq_config: T.unsafe(nil), without_defaults: T.unsafe(nil)); end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#22
  def dynamic=(value); end

  # @return [Boolean]
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#18
  def dynamic?; end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#30
  def dynamic_every=(value); end

  # @return [Boolean]
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#26
  def dynamic_every?; end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#14
  def enabled=(value); end

  # @return [Boolean]
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#10
  def enabled?; end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#46
  def listened_queues_only=(value); end

  # @return [Boolean]
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#42
  def listened_queues_only?; end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#50
  def rufus_scheduler_options; end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#54
  def rufus_scheduler_options=(value); end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#34
  def schedule; end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#38
  def schedule=(value); end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#58
  def sidekiq_queues; end

  private

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#75
  def fetch_scheduler_config(sidekiq_config, without_defaults); end

  # Returns the value of attribute scheduler_config.
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#64
  def scheduler_config; end

  # Returns the value of attribute sidekiq_config.
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#65
  def sidekiq_config; end
end

# source://sidekiq-scheduler//lib/sidekiq-scheduler/config.rb#67
SidekiqScheduler::Config::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# The delayed job router in the system.  This
# manages the scheduled jobs pushed messages
# from Redis onto the work queues
#
# source://sidekiq-scheduler//lib/sidekiq-scheduler/manager.rb#10
class SidekiqScheduler::Manager
  # @return [Manager] a new instance of Manager
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/manager.rb#11
  def initialize(config); end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/manager.rb#23
  def start; end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/manager.rb#19
  def stop; end

  private

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/manager.rb#29
  def set_current_scheduler_options(config); end
end

# source://sidekiq-scheduler//lib/sidekiq-scheduler/sidekiq_adapter.rb#2
class SidekiqScheduler::OptionNotSupportedAnymore < ::StandardError; end

# source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#2
module SidekiqScheduler::RedisManager
  class << self
    # Register a schedule change for a given job
    #
    # @param name [String] The name of the job
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#115
    def add_schedule_change(name); end

    # Remove all the schedule changes records
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#120
    def clean_schedules_changed; end

    # Returns the schedules of all the jobs
    #
    # @return [Hash] hash with all the job schedules
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#91
    def get_all_schedules; end

    # Returns the last execution time of a given job
    #
    # @param name [String] The name of the job
    # @return [String] last time the job was executed
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#38
    def get_job_last_time(name); end

    # Returns the next execution time for a given job
    #
    # @param name [String] The name of the job
    # @return [String] next time the job has to be executed
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#29
    def get_job_next_time(name); end

    # Returns the schedule of a given job
    #
    # @param name [String] The name of the job
    # @return [String] schedule in JSON format
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#11
    def get_job_schedule(name); end

    # Returns the state of a given job
    #
    # @param name [String] The name of the job
    # @return [String] state in JSON format
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#20
    def get_job_state(name); end

    # Returns all the schedule changes for a given time range.
    #
    # @param from [Float] The minimum value in the range
    # @param to [Float] The maximum value in the range
    # @return [Array] array with all the changed job names
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#108
    def get_schedule_changes(from, to); end

    # Removes the value of a Redis stored hash field
    #
    # @param hash_key [String] The key name of the hash
    # @param field_key [String] The key name of the field
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#237
    def hdel(hash_key, field_key); end

    # Returns the value of a Redis stored hash field
    #
    # @param hash_key [String] The key name of the hash
    # @param field_key [String] The key name of the field
    # @return [String]
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#220
    def hget(hash_key, field_key); end

    # Sets the value of a Redis stored hash field
    #
    # @param hash_key [String] The key name of the hash
    # @param field_key [String] The key name of the field
    # @param value [String] The new value name for the field
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#229
    def hset(hash_key, field_key, value); end

    # Returns the key prefix used to generate all scheduler keys
    #
    # @return [String] with the key prefix
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#200
    def key_prefix; end

    # Sets the key prefix used to scope all scheduler keys
    #
    # @param value [String] The string to use as the prefix. A ":" will be appended as a delimiter if needed.
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#207
    def key_prefix=(value); end

    # Returns the key of the Redis hash for job's last execution times hash
    #
    # @return [String] with the key
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#172
    def last_times_key; end

    # Returns the key of the Redis hash for job's execution times hash
    #
    # @return [String] with the key
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#165
    def next_times_key; end

    # Returns the key of the Redis sorted set used to store job enqueues
    #
    # @param job_name [String] The name of the job
    # @return [String] the pushed job key
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#158
    def pushed_job_key(job_name); end

    # Removes a queued job instance
    #
    # @param job_name [String] The name of the job
    # @param time [Time] The time at which the job was cleared by the scheduler
    # @return [Boolean] true if the job was registered, false otherwise
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#130
    def register_job_instance(job_name, time); end

    # Removes instances of the job older than 24 hours
    #
    # @param job_name [String] The name of the job
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#145
    def remove_elder_job_instances(job_name); end

    # Removes the next execution time for a given job
    #
    # @param name [String] The name of the job
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#84
    def remove_job_next_time(name); end

    # Removes the schedule for a given job
    #
    # @param name [String] The name of the job
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#77
    def remove_job_schedule(name); end

    # Returns boolean value that indicates if the schedules value exists
    #
    # @return [Boolean] true if the schedules key is set, false otherwise
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#98
    def schedule_exist?; end

    # Returns the Redis's key for saving schedule changes.
    #
    # @return [String] with the key
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#193
    def schedules_changed_key; end

    # Returns the Redis's key for saving schedules.
    #
    # @return [String] with the key
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#186
    def schedules_key; end

    # Returns the Redis's key for saving schedule states.
    #
    # @return [String] with the key
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#179
    def schedules_state_key; end

    # Sets the last execution time for a given job
    #
    # @param name [String] The name of the job
    # @param last_time [String] The last time the job was executed
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#70
    def set_job_last_time(name, last_time); end

    # Sets the next execution time for a given job
    #
    # @param name [String] The name of the job
    # @param next_time [String] The next time the job has to be executed
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#62
    def set_job_next_time(name, next_time); end

    # Sets the schedule for a given job
    #
    # @param name [String] The name of the job
    # @param config [Hash] The new schedule for the job
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#46
    def set_job_schedule(name, config); end

    # Sets the state for a given job
    #
    # @param name [String] The name of the job
    # @param state [Hash] The new state for the job
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#54
    def set_job_state(name, state); end
  end
end

# source://sidekiq-scheduler//lib/sidekiq-scheduler/redis_manager.rb#4
SidekiqScheduler::RedisManager::REGISTERED_JOBS_THRESHOLD_IN_SECONDS = T.let(T.unsafe(nil), Integer)

# source://sidekiq-scheduler//lib/sidekiq-scheduler/rufus_utils.rb#4
class SidekiqScheduler::RufusUtils
  class << self
    # Normalizes schedule options to rufus scheduler options
    #
    # @example
    #   normalize_schedule_options('15m') => ['15m', {}]
    #   normalize_schedule_options(['15m']) => ['15m', {}]
    #   normalize_schedule_options(['15m', first_in: '5m']) => ['15m', { first_in: '5m' }]
    # @param options [String, Array]
    # @return [Array]
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/rufus_utils.rb#16
    def normalize_schedule_options(options); end
  end
end

# source://sidekiq-scheduler//lib/sidekiq-scheduler/schedule.rb#7
module SidekiqScheduler::Schedule
  # gets the schedule as it exists in redis
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/schedule.rb#81
  def get_all_schedules; end

  # Retrive the schedule configuration for the given name
  # if the name is nil it returns a hash with all the
  # names end their schedules.
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/schedule.rb#71
  def get_schedule(name = T.unsafe(nil)); end

  # Reloads the schedule from Redis and return it.
  #
  # @return Hash
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/schedule.rb#63
  def reload_schedule!; end

  # remove a given schedule by name
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/schedule.rb#114
  def remove_schedule(name); end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/schedule.rb#56
  def schedule; end

  # Reloads the schedule from Redis and return it.
  #
  # @return Hash
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/schedule.rb#63
  def schedule!; end

  # Accepts a new schedule configuration of the form:
  #
  #   {
  #     "MakeTea" => {
  #       "every" => "1m" },
  #     "some_name" => {
  #       "cron"        => "5/* * * *",
  #       "class"       => "DoSomeWork",
  #       "args"        => "work on this string",
  #       "description" => "this thing works it"s butter off" },
  #     ...
  #   }
  #
  # Hash keys can be anything and are used to describe and reference
  # the scheduled job. If the "class" argument is missing, the key
  # is used implicitly as "class" argument - in the "MakeTea" example,
  # "MakeTea" is used both as job name and sidekiq worker class.
  #
  # :cron can be any cron scheduling string
  #
  # :every can be used in lieu of :cron. see rufus-scheduler's 'every' usage
  # for valid syntax. If :cron is present it will take precedence over :every.
  #
  # :class must be a sidekiq worker class. If it is missing, the job name (hash key)
  # will be used as :class.
  #
  # :args can be any yaml which will be converted to a ruby literal and
  # passed in a params. (optional)
  #
  # :description is just that, a description of the job (optional). If
  # params is an array, each element in the array is passed as a separate
  # param, otherwise params is passed in as the only parameter to perform.
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/schedule.rb#41
  def schedule=(schedule_hash); end

  # Create or update a schedule with the provided name and configuration.
  #
  # Note: values for class and custom_job_class need to be strings,
  # not constants.
  #
  #    Sidekiq.set_schedule('some_job', { :class => 'SomeJob',
  #                                       :every => '15mins',
  #                                       :queue => 'high',
  #                                       :args => '/tmp/poop' })
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/schedule.rb#104
  def set_schedule(name, config); end

  private

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/schedule.rb#140
  def infer_queue(klass); end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/schedule.rb#121
  def prepare_schedule(schedule_hash); end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/schedule.rb#150
  def try_to_constantize(klass); end
end

# source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#8
class SidekiqScheduler::Scheduler
  # @return [Scheduler] a new instance of Scheduler
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#54
  def initialize(config = T.unsafe(nil)); end

  # Stops old rufus scheduler and creates a new one.  Returns the new
  # rufus scheduler
  #
  # @param stop_option [Symbol] The option to be passed to Rufus::Scheduler#stop
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#191
  def clear_schedule!(stop_option = T.unsafe(nil)); end

  # Set to update the schedule in runtime in a given time period.
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#27
  def dynamic; end

  # Set to update the schedule in runtime in a given time period.
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#27
  def dynamic=(_arg0); end

  # Set to update the schedule in runtime dynamically per this period.
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#30
  def dynamic_every; end

  # Set to update the schedule in runtime dynamically per this period.
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#30
  def dynamic_every=(_arg0); end

  # Set to enable or disable the scheduler.
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#24
  def enabled; end

  # Set to enable or disable the scheduler.
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#24
  def enabled=(_arg0); end

  # Enqueue a job based on a config hash
  #
  # @param job_config [Hash] the job configuration
  # @param time [Time] time the job is enqueued
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#169
  def enqueue_job(job_config, time = T.unsafe(nil)); end

  # Pushes the job into Sidekiq if not already pushed for the given time
  #
  # @param job_name [String] The job's name
  # @param time [Time] The time when the job got cleared for triggering
  # @param config [Hash] Job's config hash
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#151
  def idempotent_job_enqueue(job_name, time, config); end

  # @return [Boolean]
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#232
  def job_enabled?(name); end

  # Set to schedule jobs only when will be pushed to queues listened by sidekiq
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#33
  def listened_queues_only; end

  # Set to schedule jobs only when will be pushed to queues listened by sidekiq
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#33
  def listened_queues_only=(_arg0); end

  # Pulls the schedule from Sidekiq.schedule and loads it into the
  # rufus scheduler instance
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#81
  def load_schedule!; end

  # Loads a job schedule into the Rufus::Scheduler and stores it in @scheduled_jobs
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#114
  def load_schedule_job(name, config); end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#69
  def print_schedule; end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#202
  def reload_schedule!; end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#183
  def rufus_scheduler; end

  # Set custom options for rufus scheduler, like max_work_threads.
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#36
  def rufus_scheduler_options; end

  # Set custom options for rufus scheduler, like max_work_threads.
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#36
  def rufus_scheduler_options=(_arg0); end

  # the Rufus::Scheduler jobs that are scheduled
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#65
  def scheduled_jobs; end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#243
  def toggle_all_jobs(new_state); end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#237
  def toggle_job_enabled(name); end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#212
  def update_schedule; end

  private

  # Adds a Hash with schedule metadata as the last argument to call the worker.
  # It currently returns the schedule time as a Float number representing the milisencods
  # since epoch.
  #
  # @example with hash argument
  #   arguments_with_metadata({value: 1}, scheduled_at: Time.now.round(3))
  #   #=> [{value: 1}, {scheduled_at: <miliseconds since epoch>}]
  # @param args [Array|Hash]
  # @param metadata [Hash]
  # @return [Array] arguments with added metadata
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#300
  def arguments_with_metadata(args, metadata); end

  # Returns true if a job's queue is included in the array of queues
  #
  # If queues are empty, returns true.
  #
  # @param job_queue [String] Job's queue name
  # @param queues [Array<String>]
  # @return [Boolean]
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#316
  def enabled_queue?(job_queue, queues); end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#348
  def handle_errors; end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#255
  def new_job(name, interval_type, config, schedule, options); end

  # Convert the given arguments in the format expected to be enqueued.
  #
  # @option config
  # @option config
  # @param config [Hash] the options to be converted
  # @return [Hash]
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#328
  def prepare_arguments(config); end

  # Returns true if the given schedule config hash matches the current ENV['RAILS_ENV']
  #
  # @param config [Hash] The schedule job configuration
  # @return [Boolean] true if the schedule config matches the current ENV['RAILS_ENV']
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#344
  def rails_env_matches?(config); end

  # Retrieves a schedule state
  #
  # @param name [String] with the schedule's name
  # @return [Hash] with the schedule's state
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#275
  def schedule_state(name); end

  # Returns the value of attribute scheduler_config.
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#253
  def scheduler_config; end

  # Saves a schedule state
  #
  # @param name [String] with the schedule's name
  # @param state [Hash] with the schedule's state
  #
  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#285
  def set_schedule_state(name, state); end

  # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#263
  def unschedule_job(name); end

  class << self
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#40
    def instance; end

    # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#45
    def instance=(value); end

    # source://sidekiq-scheduler//lib/sidekiq-scheduler/scheduler.rb#49
    def method_missing(method, *arguments, &block); end
  end
end

# source://sidekiq-scheduler//lib/sidekiq-scheduler/sidekiq_adapter.rb#4
class SidekiqScheduler::SidekiqAdapter
  class << self
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/sidekiq_adapter.rb#20
    def check_using_old_sidekiq_scheduler_config!(sidekiq_config); end

    # source://sidekiq-scheduler//lib/sidekiq-scheduler/sidekiq_adapter.rb#8
    def fetch_scheduler_config_from_sidekiq(sidekiq_config); end

    # @return [Boolean]
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/sidekiq_adapter.rb#70
    def redis_key_exists?(key_name); end

    # source://sidekiq-scheduler//lib/sidekiq-scheduler/sidekiq_adapter.rb#56
    def sidekiq_queues(sidekiq_config); end

    # source://sidekiq-scheduler//lib/sidekiq-scheduler/sidekiq_adapter.rb#38
    def start_schedule_manager(sidekiq_config:, schedule_manager:); end

    # source://sidekiq-scheduler//lib/sidekiq-scheduler/sidekiq_adapter.rb#48
    def stop_schedule_manager(sidekiq_config:); end
  end
end

# source://sidekiq-scheduler//lib/sidekiq-scheduler/sidekiq_adapter.rb#5
SidekiqScheduler::SidekiqAdapter::SIDEKIQ_GTE_6_5_0 = T.let(T.unsafe(nil), TrueClass)

# source://sidekiq-scheduler//lib/sidekiq-scheduler/sidekiq_adapter.rb#6
SidekiqScheduler::SidekiqAdapter::SIDEKIQ_GTE_7_0_0 = T.let(T.unsafe(nil), TrueClass)

# source://sidekiq-scheduler//lib/sidekiq-scheduler/utils.rb#4
module SidekiqScheduler::Utils
  class << self
    # Returns true if the enqueuing needs to be done for an ActiveJob
    #  class false otherwise.
    #
    # @param klass [Class] the class to check is decendant from ActiveJob
    # @return [Boolean]
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/utils.rb#77
    def active_job_enqueue?(klass); end

    # Enqueues the job using the ActiveJob.
    #
    # @param config [Hash] The job configuration
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/utils.rb#92
    def enqueue_with_active_job(config); end

    # Enqueues the job using the Sidekiq client.
    #
    # @param config [Hash] The job configuration
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/utils.rb#85
    def enqueue_with_sidekiq(config); end

    # Initializes active_job using the passed parameters.
    #
    # @param klass [Class] The class to initialize
    # @param args [Array, Hash] The parameters passed to the klass initializer
    # @return [Object] instance of the class klass
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/utils.rb#63
    def initialize_active_job(klass, args); end

    # Creates a new instance of rufus scheduler.
    #
    # @return [Rufus::Scheduler] the scheduler instance
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/utils.rb#112
    def new_rufus_scheduler(options = T.unsafe(nil)); end

    # Removes the hash values associated to the rufus metadata keys.
    #
    # @param config [Hash] The job configuration
    # @return [Hash] the sanitized job config
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/utils.rb#105
    def sanitize_job_config(config); end

    # Stringify keys belonging to a hash.
    #
    # Also stringifies nested keys and keys of hashes inside arrays, and sets
    #
    # @param object [Object]
    # @return [Object]
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/utils.rb#15
    def stringify_keys(object); end

    # Symbolize keys belonging to a hash.
    #
    # Also symbolizes nested keys and keys of hashes inside arrays, and sets
    #
    # @param object [Object]
    # @return [Object]
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/utils.rb#34
    def symbolize_keys(object); end

    # Constantize a given string.
    #
    # @param klass [String] The string to constantize
    # @return [Class] the class corresponding to the klass param
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/utils.rb#51
    def try_to_constantize(klass); end

    # Pushes job's last execution time
    #
    # @param name [String] The job's name
    # @param last_time [Time] The job's last execution time
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/utils.rb#139
    def update_job_last_time(name, last_time); end

    # Pushes job's next time execution
    #
    # @param name [String] The job's name
    # @param next_time [Time] The job's next time execution
    #
    # source://sidekiq-scheduler//lib/sidekiq-scheduler/utils.rb#127
    def update_job_next_time(name, next_time); end
  end
end

# source://sidekiq-scheduler//lib/sidekiq-scheduler/utils.rb#6
SidekiqScheduler::Utils::RUFUS_METADATA_KEYS = T.let(T.unsafe(nil), Array)

# source://sidekiq-scheduler//lib/sidekiq-scheduler/version.rb#2
SidekiqScheduler::VERSION = T.let(T.unsafe(nil), String)
